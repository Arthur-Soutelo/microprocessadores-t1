
microprocessadores-t1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000002c6  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000140  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000002c6  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000002f5  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000303  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001511  00000000  00000000  0000036b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000cc9  00000000  00000000  0000187c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004ee  00000000  00000000  00002545  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b8  00000000  00000000  00002a34  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ef  00000000  00000000  00002aec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001c3  00000000  00000000  00002edb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000309e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000244  00000244  000002b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000030e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.main    00000006  0000023e  0000023e  000002b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.delay_ms 0000001a  000001fe  000001fe  00000272  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.write_command_LCD 00000062  00000140  00000140  000001b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.clear_display 00000010  0000022e  0000022e  000002a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.init_LCD 0000005c  000001a2  000001a2  00000216  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_fini 00000002  0000024c  0000024c  000002c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_funcs_on_exit 00000002  0000024e  0000024e  000002c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__dummy_simulator_exit 00000002  00000250  00000250  000002c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.exit    00000016  00000218  00000218  0000028c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text._Exit   00000004  00000248  00000248  000002bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
   8:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
   c:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  10:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  14:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  18:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  1c:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  20:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  24:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  28:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  2c:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  30:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  34:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  38:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  3c:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  40:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  44:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  48:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  4c:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  50:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  54:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  58:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  5c:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  60:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  64:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  68:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  6c:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  70:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  74:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  78:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  7c:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  80:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  84:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  88:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  8c:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  90:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  94:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  98:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  9c:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  a0:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  a4:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  a8:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  ac:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  b0:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  b4:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  b8:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  bc:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  c0:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  c4:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  c8:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  cc:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  d0:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  d4:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  d8:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  dc:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>
  e0:	0c 94 22 01 	jmp	0x244	; 0x244 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	e4 ee       	ldi	r30, 0xE4	; 228
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	40 e0       	ldi	r20, 0x00	; 0
  fa:	19 c0       	rjmp	.+50     	; 0x12e <__do_clear_bss+0x8>
  fc:	b7 91       	elpm	r27, Z+
  fe:	a7 91       	elpm	r26, Z+
 100:	37 91       	elpm	r19, Z+
 102:	27 91       	elpm	r18, Z+
 104:	07 91       	elpm	r16, Z+
 106:	07 fd       	sbrc	r16, 7
 108:	0e c0       	rjmp	.+28     	; 0x126 <__do_clear_bss>
 10a:	97 91       	elpm	r25, Z+
 10c:	87 91       	elpm	r24, Z+
 10e:	ef 01       	movw	r28, r30
 110:	f9 2f       	mov	r31, r25
 112:	e8 2f       	mov	r30, r24
 114:	0b bf       	out	0x3b, r16	; 59
 116:	07 90       	elpm	r0, Z+
 118:	0d 92       	st	X+, r0
 11a:	a2 17       	cp	r26, r18
 11c:	b3 07       	cpc	r27, r19
 11e:	d9 f7       	brne	.-10     	; 0x116 <__do_copy_data+0x22>
 120:	fe 01       	movw	r30, r28
 122:	1b be       	out	0x3b, r1	; 59
 124:	04 c0       	rjmp	.+8      	; 0x12e <__do_clear_bss+0x8>

00000126 <__do_clear_bss>:
 126:	1d 92       	st	X+, r1
 128:	a2 17       	cp	r26, r18
 12a:	b3 07       	cpc	r27, r19
 12c:	e1 f7       	brne	.-8      	; 0x126 <__do_clear_bss>
 12e:	e4 3e       	cpi	r30, 0xE4	; 228
 130:	f4 07       	cpc	r31, r20
 132:	21 f7       	brne	.-56     	; 0xfc <__do_copy_data+0x8>
 134:	0e 94 1f 01 	call	0x23e	; 0x23e <main>
 138:	0c 94 0c 01 	jmp	0x218	; 0x218 <exit>

0000013c <_exit>:
 13c:	f8 94       	cli

0000013e <__stop_program>:
 13e:	ff cf       	rjmp	.-2      	; 0x13e <__stop_program>

Disassembly of section .text:

00000244 <__bad_interrupt>:
 244:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

0000023e <main>:
int main(void){

    //uart_init();	// Inicializar UART
    //sei();			// Ativa interrupt
	
	init_LCD();
 23e:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <init_LCD>
 242:	ff cf       	rjmp	.-2      	; 0x242 <main+0x4>

Disassembly of section .text.delay_ms:

000001fe <delay_ms>:
	unsigned char c;
	for (c = 0; text[c] != '\0'; c++) {
		write_data_LCD(text[c]);
		write_command_LCD(0x06);	// Entry mode set
	}
}
 1fe:	20 e0       	ldi	r18, 0x00	; 0
 200:	30 e0       	ldi	r19, 0x00	; 0
 202:	06 c0       	rjmp	.+12     	; 0x210 <delay_ms+0x12>
 204:	45 e0       	ldi	r20, 0x05	; 5
 206:	4a 95       	dec	r20
 208:	f1 f7       	brne	.-4      	; 0x206 <delay_ms+0x8>
 20a:	00 00       	nop
 20c:	2f 5f       	subi	r18, 0xFF	; 255
 20e:	3f 4f       	sbci	r19, 0xFF	; 255
 210:	28 17       	cp	r18, r24
 212:	39 07       	cpc	r19, r25
 214:	b8 f3       	brcs	.-18     	; 0x204 <delay_ms+0x6>
 216:	08 95       	ret

Disassembly of section .text.write_command_LCD:

00000140 <write_command_LCD>:
 140:	cf 93       	push	r28
 142:	c8 2f       	mov	r28, r24
 144:	85 b1       	in	r24, 0x05	; 5
 146:	8e 7f       	andi	r24, 0xFE	; 254
 148:	85 b9       	out	0x05, r24	; 5
 14a:	85 b1       	in	r24, 0x05	; 5
 14c:	8f 70       	andi	r24, 0x0F	; 15
 14e:	85 b9       	out	0x05, r24	; 5
 150:	85 b1       	in	r24, 0x05	; 5
 152:	9c 2f       	mov	r25, r28
 154:	90 7f       	andi	r25, 0xF0	; 240
 156:	89 2b       	or	r24, r25
 158:	85 b9       	out	0x05, r24	; 5
 15a:	85 b1       	in	r24, 0x05	; 5
 15c:	82 60       	ori	r24, 0x02	; 2
 15e:	85 b9       	out	0x05, r24	; 5
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e 94 ff 00 	call	0x1fe	; 0x1fe <delay_ms>
 168:	85 b1       	in	r24, 0x05	; 5
 16a:	8d 7f       	andi	r24, 0xFD	; 253
 16c:	85 b9       	out	0x05, r24	; 5
 16e:	85 b1       	in	r24, 0x05	; 5
 170:	8f 70       	andi	r24, 0x0F	; 15
 172:	85 b9       	out	0x05, r24	; 5
 174:	25 b1       	in	r18, 0x05	; 5
 176:	30 e1       	ldi	r19, 0x10	; 16
 178:	c3 9f       	mul	r28, r19
 17a:	c0 01       	movw	r24, r0
 17c:	11 24       	eor	r1, r1
 17e:	82 2b       	or	r24, r18
 180:	85 b9       	out	0x05, r24	; 5
 182:	85 b1       	in	r24, 0x05	; 5
 184:	82 60       	ori	r24, 0x02	; 2
 186:	85 b9       	out	0x05, r24	; 5
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	0e 94 ff 00 	call	0x1fe	; 0x1fe <delay_ms>
 190:	85 b1       	in	r24, 0x05	; 5
 192:	8d 7f       	andi	r24, 0xFD	; 253
 194:	85 b9       	out	0x05, r24	; 5
 196:	82 e0       	ldi	r24, 0x02	; 2
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	0e 94 ff 00 	call	0x1fe	; 0x1fe <delay_ms>
 19e:	cf 91       	pop	r28
 1a0:	08 95       	ret

Disassembly of section .text.clear_display:

0000022e <clear_display>:

	delay_ms(2); // Adjust timing as needed
}

void clear_display(void) {
	write_command_LCD(0x01); // Clear display
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	0e 94 a0 00 	call	0x140	; 0x140 <__data_load_end>
	delay_ms(2); // Wait for command to complete
 234:	82 e0       	ldi	r24, 0x02	; 2
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	0e 94 ff 00 	call	0x1fe	; 0x1fe <delay_ms>
 23c:	08 95       	ret

Disassembly of section .text.init_LCD:

000001a2 <init_LCD>:
	unsigned char c;
	for (c = 0; text[c] != '\0'; c++) {
		write_data_LCD(text[c]);
		write_command_LCD(0x06);	// Entry mode set
	}
}
 1a2:	84 b1       	in	r24, 0x04	; 4
 1a4:	83 6f       	ori	r24, 0xF3	; 243
 1a6:	84 b9       	out	0x04, r24	; 4
 1a8:	84 ef       	ldi	r24, 0xF4	; 244
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	0e 94 ff 00 	call	0x1fe	; 0x1fe <delay_ms>
 1b0:	83 e0       	ldi	r24, 0x03	; 3
 1b2:	0e 94 a0 00 	call	0x140	; 0x140 <__data_load_end>
 1b6:	85 e0       	ldi	r24, 0x05	; 5
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	0e 94 ff 00 	call	0x1fe	; 0x1fe <delay_ms>
 1be:	83 e0       	ldi	r24, 0x03	; 3
 1c0:	0e 94 a0 00 	call	0x140	; 0x140 <__data_load_end>
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	0e 94 ff 00 	call	0x1fe	; 0x1fe <delay_ms>
 1cc:	83 e0       	ldi	r24, 0x03	; 3
 1ce:	0e 94 a0 00 	call	0x140	; 0x140 <__data_load_end>
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	0e 94 ff 00 	call	0x1fe	; 0x1fe <delay_ms>
 1da:	82 e0       	ldi	r24, 0x02	; 2
 1dc:	0e 94 a0 00 	call	0x140	; 0x140 <__data_load_end>
 1e0:	88 e2       	ldi	r24, 0x28	; 40
 1e2:	0e 94 a0 00 	call	0x140	; 0x140 <__data_load_end>
 1e6:	8c e0       	ldi	r24, 0x0C	; 12
 1e8:	0e 94 a0 00 	call	0x140	; 0x140 <__data_load_end>
 1ec:	86 e0       	ldi	r24, 0x06	; 6
 1ee:	0e 94 a0 00 	call	0x140	; 0x140 <__data_load_end>
 1f2:	0e 94 17 01 	call	0x22e	; 0x22e <clear_display>
 1f6:	80 e8       	ldi	r24, 0x80	; 128
 1f8:	0e 94 a0 00 	call	0x140	; 0x140 <__data_load_end>
 1fc:	08 95       	ret

Disassembly of section .text.__dummy_fini:

0000024c <_fini>:
 24c:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000024e <__funcs_on_exit>:
 24e:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000250 <__simulator_exit>:
 250:	08 95       	ret

Disassembly of section .text.exit:

00000218 <exit>:
 218:	ec 01       	movw	r28, r24
 21a:	0e 94 27 01 	call	0x24e	; 0x24e <__funcs_on_exit>
 21e:	0e 94 26 01 	call	0x24c	; 0x24c <_fini>
 222:	ce 01       	movw	r24, r28
 224:	0e 94 28 01 	call	0x250	; 0x250 <__simulator_exit>
 228:	ce 01       	movw	r24, r28
 22a:	0e 94 24 01 	call	0x248	; 0x248 <_Exit>

Disassembly of section .text._Exit:

00000248 <_Exit>:
 248:	0e 94 9e 00 	call	0x13c	; 0x13c <_exit>
