
microprocessadores-t1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00000600  000006b4  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000148  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000006b4  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000002a  00000000  00000000  000006e3  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000f8  00000000  00000000  0000070d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000023bb  00000000  00000000  00000805  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000010a6  00000000  00000000  00002bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a68  00000000  00000000  00003c66  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000244  00000000  00000000  000046d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000048a  00000000  00000000  00004914  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000009da  00000000  00000000  00004d9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  00005778  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000005e2  000005e2  00000696  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005848  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .progmemx.data 0000001d  00000148  00000148  000001fc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 15 .text.main    00000066  00000364  00000364  00000418  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.write_command_LCD 00000066  000003ca  000003ca  0000047e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.init_LCD 0000004a  00000430  00000430  000004e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.write_data_LCD 0000006c  000002f8  000002f8  000003ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.write_string_LCD 0000002e  0000052a  0000052a  000005de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.write_string_line 00000030  000004fa  000004fa  000005ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.clear_display 00000014  000005b2  000005b2  00000666  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.uart_init 0000002a  00000558  00000558  0000060c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.uart_send 0000000e  000005c6  000005c6  0000067a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.send_product_number 000000a0  00000258  00000258  0000030c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.debounce 0000003c  000004be  000004be  00000572  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.keypad_init 0000001a  00000582  00000582  00000636  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .rodata       00000010  00800200  000005f0  000006a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 28 .text.keypad_getkey 000000f2  00000166  00000166  0000021a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.libgcc.div 00000044  0000047a  0000047a  0000052e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.libgcc  0000000e  000005d4  000005d4  00000688  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.__dummy_fini 00000002  000005ea  000005ea  0000069e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.__dummy_funcs_on_exit 00000002  000005ec  000005ec  000006a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.__dummy_simulator_exit 00000002  000005ee  000005ee  000006a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.exit    00000016  0000059c  0000059c  00000650  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text._Exit   00000004  000005e6  000005e6  0000069a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 76 00 	jmp	0xec	; 0xec <__ctors_end>
   4:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
   8:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
   c:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
  10:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
  14:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
  18:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
  1c:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
  20:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
  24:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
  28:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
  2c:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
  30:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
  34:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
  38:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
  3c:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
  40:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
  44:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
  48:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
  4c:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
  50:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
  54:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
  58:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
  5c:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
  60:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
  64:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
  68:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
  6c:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
  70:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
  74:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
  78:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
  7c:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
  80:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
  84:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
  88:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
  8c:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
  90:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
  94:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
  98:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
  9c:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
  a0:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
  a4:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
  a8:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
  ac:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
  b0:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
  b4:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
  b8:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
  bc:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
  c0:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
  c4:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
  c8:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
  cc:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
  d0:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
  d4:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
  d8:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
  dc:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>
  e0:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__bad_interrupt>

000000e4 <.dinit>:
  e4:	02 00       	.word	0x0002	; ????
  e6:	02 10       	cpse	r0, r2
  e8:	00 05       	cpc	r16, r0
  ea:	f0 00       	.word	0x00f0	; ????

000000ec <__ctors_end>:
  ec:	11 24       	eor	r1, r1
  ee:	1f be       	out	0x3f, r1	; 63
  f0:	cf ef       	ldi	r28, 0xFF	; 255
  f2:	d1 e2       	ldi	r29, 0x21	; 33
  f4:	de bf       	out	0x3e, r29	; 62
  f6:	cd bf       	out	0x3d, r28	; 61
  f8:	00 e0       	ldi	r16, 0x00	; 0
  fa:	0c bf       	out	0x3c, r16	; 60

000000fc <__do_copy_data>:
  fc:	e4 ee       	ldi	r30, 0xE4	; 228
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	40 e0       	ldi	r20, 0x00	; 0
 102:	19 c0       	rjmp	.+50     	; 0x136 <__do_clear_bss+0x8>
 104:	b7 91       	elpm	r27, Z+
 106:	a7 91       	elpm	r26, Z+
 108:	37 91       	elpm	r19, Z+
 10a:	27 91       	elpm	r18, Z+
 10c:	07 91       	elpm	r16, Z+
 10e:	07 fd       	sbrc	r16, 7
 110:	0e c0       	rjmp	.+28     	; 0x12e <__do_clear_bss>
 112:	97 91       	elpm	r25, Z+
 114:	87 91       	elpm	r24, Z+
 116:	ef 01       	movw	r28, r30
 118:	f9 2f       	mov	r31, r25
 11a:	e8 2f       	mov	r30, r24
 11c:	0b bf       	out	0x3b, r16	; 59
 11e:	07 90       	elpm	r0, Z+
 120:	0d 92       	st	X+, r0
 122:	a2 17       	cp	r26, r18
 124:	b3 07       	cpc	r27, r19
 126:	d9 f7       	brne	.-10     	; 0x11e <__do_copy_data+0x22>
 128:	fe 01       	movw	r30, r28
 12a:	1b be       	out	0x3b, r1	; 59
 12c:	04 c0       	rjmp	.+8      	; 0x136 <__do_clear_bss+0x8>

0000012e <__do_clear_bss>:
 12e:	1d 92       	st	X+, r1
 130:	a2 17       	cp	r26, r18
 132:	b3 07       	cpc	r27, r19
 134:	e1 f7       	brne	.-8      	; 0x12e <__do_clear_bss>
 136:	eb 3e       	cpi	r30, 0xEB	; 235
 138:	f4 07       	cpc	r31, r20
 13a:	21 f7       	brne	.-56     	; 0x104 <__do_copy_data+0x8>
 13c:	0e 94 b2 01 	call	0x364	; 0x364 <main>
 140:	0c 94 ce 02 	jmp	0x59c	; 0x59c <exit>

00000144 <_exit>:
 144:	f8 94       	cli

00000146 <__stop_program>:
 146:	ff cf       	rjmp	.-2      	; 0x146 <__stop_program>

Disassembly of section .text:

000005e2 <__bad_interrupt>:
 5e2:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

00000364 <main>:
//}


int main(void){
	// Inicializa o LCD
	init_LCD();
 364:	0e 94 18 02 	call	0x430	; 0x430 <init_LCD>
	// Escreve uma mensagem no LCD
	write_string_line(1,"VenDELET");
 368:	48 e4       	ldi	r20, 0x48	; 72
 36a:	51 e0       	ldi	r21, 0x01	; 1
 36c:	60 e0       	ldi	r22, 0x00	; 0
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	0e 94 7d 02 	call	0x4fa	; 0x4fa <write_string_line>
	write_string_line(2,"Fais ton choix");
 374:	41 e5       	ldi	r20, 0x51	; 81
 376:	51 e0       	ldi	r21, 0x01	; 1
 378:	60 e0       	ldi	r22, 0x00	; 0
 37a:	82 e0       	ldi	r24, 0x02	; 2
 37c:	0e 94 7d 02 	call	0x4fa	; 0x4fa <write_string_line>

	// Inicializa o Teclado
	keypad_init();
 380:	0e 94 c1 02 	call	0x582	; 0x582 <keypad_init>

	// Initialize the UART with desired baud rate
	uart_init(9600);
 384:	60 e8       	ldi	r22, 0x80	; 128
 386:	75 e2       	ldi	r23, 0x25	; 37
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	0e 94 ac 02 	call	0x558	; 0x558 <uart_init>
    //sei();			// Ativa interrupt
	
	char key;
    while(1){
		// Get the pressed key
		key = keypad_getkey();
 390:	0e 94 b3 00 	call	0x166	; 0x166 <keypad_getkey>
 394:	c8 2f       	mov	r28, r24
		
		if(key!=0){
 396:	88 23       	and	r24, r24
 398:	d9 f3       	breq	.-10     	; 0x390 <main+0x2c>
			clear_display();
 39a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <clear_display>
			write_string_line(1,"Boa ");
 39e:	40 e6       	ldi	r20, 0x60	; 96
 3a0:	51 e0       	ldi	r21, 0x01	; 1
 3a2:	60 e0       	ldi	r22, 0x00	; 0
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	0e 94 7d 02 	call	0x4fa	; 0x4fa <write_string_line>
			//write_string_line(2,key);
			write_data_LCD(key);
 3aa:	8c 2f       	mov	r24, r28
 3ac:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <write_data_LCD>
			//uart_send(key);
			send_product_number(key);
 3b0:	8c 2f       	mov	r24, r28
 3b2:	0e 94 2c 01 	call	0x258	; 0x258 <send_product_number>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3b6:	2f ef       	ldi	r18, 0xFF	; 255
 3b8:	85 ea       	ldi	r24, 0xA5	; 165
 3ba:	9e e0       	ldi	r25, 0x0E	; 14
 3bc:	21 50       	subi	r18, 0x01	; 1
 3be:	80 40       	sbci	r24, 0x00	; 0
 3c0:	90 40       	sbci	r25, 0x00	; 0
 3c2:	e1 f7       	brne	.-8      	; 0x3bc <main+0x58>
 3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <main+0x62>
 3c6:	00 00       	nop
 3c8:	e3 cf       	rjmp	.-58     	; 0x390 <main+0x2c>

Disassembly of section .text.write_command_LCD:

000003ca <write_command_LCD>:
 3ca:	95 b1       	in	r25, 0x05	; 5
 3cc:	9f 70       	andi	r25, 0x0F	; 15
 3ce:	28 2f       	mov	r18, r24
 3d0:	20 7f       	andi	r18, 0xF0	; 240
 3d2:	92 2b       	or	r25, r18
 3d4:	95 b9       	out	0x05, r25	; 5
 3d6:	95 b1       	in	r25, 0x05	; 5
 3d8:	9e 7f       	andi	r25, 0xFE	; 254
 3da:	95 b9       	out	0x05, r25	; 5
 3dc:	95 b1       	in	r25, 0x05	; 5
 3de:	92 60       	ori	r25, 0x02	; 2
 3e0:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3e2:	35 e0       	ldi	r19, 0x05	; 5
 3e4:	3a 95       	dec	r19
 3e6:	f1 f7       	brne	.-4      	; 0x3e4 <write_command_LCD+0x1a>
 3e8:	00 00       	nop
 3ea:	95 b1       	in	r25, 0x05	; 5
 3ec:	9d 7f       	andi	r25, 0xFD	; 253
 3ee:	95 b9       	out	0x05, r25	; 5
 3f0:	ef e1       	ldi	r30, 0x1F	; 31
 3f2:	f3 e0       	ldi	r31, 0x03	; 3
 3f4:	31 97       	sbiw	r30, 0x01	; 1
 3f6:	f1 f7       	brne	.-4      	; 0x3f4 <write_command_LCD+0x2a>
 3f8:	00 c0       	rjmp	.+0      	; 0x3fa <write_command_LCD+0x30>
 3fa:	00 00       	nop
 3fc:	25 b1       	in	r18, 0x05	; 5
 3fe:	f0 e1       	ldi	r31, 0x10	; 16
 400:	8f 9f       	mul	r24, r31
 402:	c0 01       	movw	r24, r0
 404:	11 24       	eor	r1, r1
 406:	92 2f       	mov	r25, r18
 408:	9f 70       	andi	r25, 0x0F	; 15
 40a:	89 2b       	or	r24, r25
 40c:	85 b9       	out	0x05, r24	; 5
 40e:	85 b1       	in	r24, 0x05	; 5
 410:	82 60       	ori	r24, 0x02	; 2
 412:	85 b9       	out	0x05, r24	; 5
 414:	35 e0       	ldi	r19, 0x05	; 5
 416:	3a 95       	dec	r19
 418:	f1 f7       	brne	.-4      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 41a:	00 00       	nop
 41c:	85 b1       	in	r24, 0x05	; 5
 41e:	8d 7f       	andi	r24, 0xFD	; 253
 420:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 422:	8f e3       	ldi	r24, 0x3F	; 63
 424:	9f e1       	ldi	r25, 0x1F	; 31
 426:	01 97       	sbiw	r24, 0x01	; 1
 428:	f1 f7       	brne	.-4      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 42a:	00 c0       	rjmp	.+0      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 42c:	00 00       	nop
 42e:	08 95       	ret

Disassembly of section .text.init_LCD:

00000430 <init_LCD>:
 430:	84 b1       	in	r24, 0x04	; 4
 432:	83 6f       	ori	r24, 0xF3	; 243
 434:	84 b9       	out	0x04, r24	; 4
 436:	2f ef       	ldi	r18, 0xFF	; 255
 438:	80 e7       	ldi	r24, 0x70	; 112
 43a:	92 e0       	ldi	r25, 0x02	; 2
 43c:	21 50       	subi	r18, 0x01	; 1
 43e:	80 40       	sbci	r24, 0x00	; 0
 440:	90 40       	sbci	r25, 0x00	; 0
 442:	e1 f7       	brne	.-8      	; 0x43c <init_LCD+0xc>
 444:	00 c0       	rjmp	.+0      	; 0x446 <init_LCD+0x16>
 446:	00 00       	nop
 448:	83 e3       	ldi	r24, 0x33	; 51
 44a:	0e 94 e5 01 	call	0x3ca	; 0x3ca <write_command_LCD>
 44e:	82 e3       	ldi	r24, 0x32	; 50
 450:	0e 94 e5 01 	call	0x3ca	; 0x3ca <write_command_LCD>
 454:	88 e2       	ldi	r24, 0x28	; 40
 456:	0e 94 e5 01 	call	0x3ca	; 0x3ca <write_command_LCD>
 45a:	8c e0       	ldi	r24, 0x0C	; 12
 45c:	0e 94 e5 01 	call	0x3ca	; 0x3ca <write_command_LCD>
 460:	86 e0       	ldi	r24, 0x06	; 6
 462:	0e 94 e5 01 	call	0x3ca	; 0x3ca <write_command_LCD>
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	0e 94 e5 01 	call	0x3ca	; 0x3ca <write_command_LCD>
 46c:	8f e3       	ldi	r24, 0x3F	; 63
 46e:	9f e1       	ldi	r25, 0x1F	; 31
 470:	01 97       	sbiw	r24, 0x01	; 1
 472:	f1 f7       	brne	.-4      	; 0x470 <init_LCD+0x40>
 474:	00 c0       	rjmp	.+0      	; 0x476 <init_LCD+0x46>
 476:	00 00       	nop
 478:	08 95       	ret

Disassembly of section .text.write_data_LCD:

000002f8 <write_data_LCD>:
 2f8:	95 b1       	in	r25, 0x05	; 5
 2fa:	9f 70       	andi	r25, 0x0F	; 15
 2fc:	28 2f       	mov	r18, r24
 2fe:	20 7f       	andi	r18, 0xF0	; 240
 300:	92 2b       	or	r25, r18
 302:	95 b9       	out	0x05, r25	; 5
 304:	95 b1       	in	r25, 0x05	; 5
 306:	91 60       	ori	r25, 0x01	; 1
 308:	95 b9       	out	0x05, r25	; 5
 30a:	95 b1       	in	r25, 0x05	; 5
 30c:	92 60       	ori	r25, 0x02	; 2
 30e:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 310:	35 e0       	ldi	r19, 0x05	; 5
 312:	3a 95       	dec	r19
 314:	f1 f7       	brne	.-4      	; 0x312 <write_data_LCD+0x1a>
 316:	00 00       	nop
 318:	95 b1       	in	r25, 0x05	; 5
 31a:	9d 7f       	andi	r25, 0xFD	; 253
 31c:	95 b9       	out	0x05, r25	; 5
 31e:	ef e1       	ldi	r30, 0x1F	; 31
 320:	f3 e0       	ldi	r31, 0x03	; 3
 322:	31 97       	sbiw	r30, 0x01	; 1
 324:	f1 f7       	brne	.-4      	; 0x322 <write_data_LCD+0x2a>
 326:	00 c0       	rjmp	.+0      	; 0x328 <write_data_LCD+0x30>
 328:	00 00       	nop
 32a:	25 b1       	in	r18, 0x05	; 5
 32c:	f0 e1       	ldi	r31, 0x10	; 16
 32e:	8f 9f       	mul	r24, r31
 330:	c0 01       	movw	r24, r0
 332:	11 24       	eor	r1, r1
 334:	92 2f       	mov	r25, r18
 336:	9f 70       	andi	r25, 0x0F	; 15
 338:	89 2b       	or	r24, r25
 33a:	85 b9       	out	0x05, r24	; 5
 33c:	85 b1       	in	r24, 0x05	; 5
 33e:	81 60       	ori	r24, 0x01	; 1
 340:	85 b9       	out	0x05, r24	; 5
 342:	85 b1       	in	r24, 0x05	; 5
 344:	82 60       	ori	r24, 0x02	; 2
 346:	85 b9       	out	0x05, r24	; 5
 348:	35 e0       	ldi	r19, 0x05	; 5
 34a:	3a 95       	dec	r19
 34c:	f1 f7       	brne	.-4      	; 0x34a <write_data_LCD+0x52>
 34e:	00 00       	nop
 350:	85 b1       	in	r24, 0x05	; 5
 352:	8d 7f       	andi	r24, 0xFD	; 253
 354:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 356:	8f e3       	ldi	r24, 0x3F	; 63
 358:	9f e1       	ldi	r25, 0x1F	; 31
 35a:	01 97       	sbiw	r24, 0x01	; 1
 35c:	f1 f7       	brne	.-4      	; 0x35a <write_data_LCD+0x62>
 35e:	00 c0       	rjmp	.+0      	; 0x360 <write_data_LCD+0x68>
 360:	00 00       	nop
 362:	08 95       	ret

Disassembly of section .text.write_string_LCD:

0000052a <write_string_LCD>:
 52a:	cf 92       	push	r12
 52c:	df 92       	push	r13
 52e:	ef 92       	push	r14
 530:	6b 01       	movw	r12, r22
 532:	e8 2e       	mov	r14, r24
 534:	07 c0       	rjmp	.+14     	; 0x544 <write_string_LCD+0x1a>
 536:	8f ef       	ldi	r24, 0xFF	; 255
 538:	c8 1a       	sub	r12, r24
 53a:	d8 0a       	sbc	r13, r24
 53c:	e8 0a       	sbc	r14, r24
 53e:	86 2f       	mov	r24, r22
 540:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <write_data_LCD>
 544:	f6 01       	movw	r30, r12
 546:	5e 2d       	mov	r21, r14
 548:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <__xload_1>
 54c:	61 11       	cpse	r22, r1
 54e:	f3 cf       	rjmp	.-26     	; 0x536 <write_string_LCD+0xc>
 550:	ef 90       	pop	r14
 552:	df 90       	pop	r13
 554:	cf 90       	pop	r12
 556:	08 95       	ret

Disassembly of section .text.write_string_line:

000004fa <write_string_line>:
 4fa:	cf 92       	push	r12
 4fc:	df 92       	push	r13
 4fe:	ef 92       	push	r14
 500:	6a 01       	movw	r12, r20
 502:	e6 2e       	mov	r14, r22
 504:	81 30       	cpi	r24, 0x01	; 1
 506:	21 f4       	brne	.+8      	; 0x510 <write_string_line+0x16>
 508:	80 e8       	ldi	r24, 0x80	; 128
 50a:	0e 94 e5 01 	call	0x3ca	; 0x3ca <write_command_LCD>
 50e:	05 c0       	rjmp	.+10     	; 0x51a <write_string_line+0x20>
 510:	82 30       	cpi	r24, 0x02	; 2
 512:	19 f4       	brne	.+6      	; 0x51a <write_string_line+0x20>
 514:	80 ec       	ldi	r24, 0xC0	; 192
 516:	0e 94 e5 01 	call	0x3ca	; 0x3ca <write_command_LCD>
 51a:	8e 2d       	mov	r24, r14
 51c:	b6 01       	movw	r22, r12
 51e:	0e 94 95 02 	call	0x52a	; 0x52a <write_string_LCD>
 522:	ef 90       	pop	r14
 524:	df 90       	pop	r13
 526:	cf 90       	pop	r12
 528:	08 95       	ret

Disassembly of section .text.clear_display:

000005b2 <clear_display>:
 5b2:	81 e0       	ldi	r24, 0x01	; 1
 5b4:	0e 94 e5 01 	call	0x3ca	; 0x3ca <write_command_LCD>
 5b8:	8f e3       	ldi	r24, 0x3F	; 63
 5ba:	9f e1       	ldi	r25, 0x1F	; 31
 5bc:	01 97       	sbiw	r24, 0x01	; 1
 5be:	f1 f7       	brne	.-4      	; 0x5bc <clear_display+0xa>
 5c0:	00 c0       	rjmp	.+0      	; 0x5c2 <clear_display+0x10>
 5c2:	00 00       	nop
 5c4:	08 95       	ret

Disassembly of section .text.uart_init:

00000558 <uart_init>:

unsigned char uart_receive(void) {
	// Wait for data to be received
	while (!(UCSR0A & (1 << RXC0)));
	return UDR0;
}
 558:	9b 01       	movw	r18, r22
 55a:	ac 01       	movw	r20, r24
 55c:	60 e4       	ldi	r22, 0x40	; 64
 55e:	72 e4       	ldi	r23, 0x42	; 66
 560:	8f e0       	ldi	r24, 0x0F	; 15
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	0e 94 3d 02 	call	0x47a	; 0x47a <__udivmodsi4>
 568:	21 50       	subi	r18, 0x01	; 1
 56a:	31 09       	sbc	r19, r1
 56c:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 570:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 574:	88 e1       	ldi	r24, 0x18	; 24
 576:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
 57a:	86 e0       	ldi	r24, 0x06	; 6
 57c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
 580:	08 95       	ret

Disassembly of section .text.uart_send:

000005c6 <uart_send>:

void uart_send(unsigned char data) {
	// Wait for empty transmit buffer
	while (!(UCSR0A & (1 << UDRE0)));
 5c6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 5ca:	95 ff       	sbrs	r25, 5
 5cc:	fc cf       	rjmp	.-8      	; 0x5c6 <uart_send>
	// Put data into buffer, sends the data
	UDR0 = data;
 5ce:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 5d2:	08 95       	ret

Disassembly of section .text.send_product_number:

00000258 <send_product_number>:

unsigned char uart_receive(void) {
	// Wait for data to be received
	while (!(UCSR0A & (1 << RXC0)));
	return UDR0;
}
 258:	0f 93       	push	r16
 25a:	1f 93       	push	r17
 25c:	cf 93       	push	r28
 25e:	df 93       	push	r29
 260:	08 2f       	mov	r16, r24
 262:	86 e5       	ldi	r24, 0x56	; 86
 264:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <uart_send>
 268:	80 e5       	ldi	r24, 0x50	; 80
 26a:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <uart_send>
 26e:	01 33       	cpi	r16, 0x31	; 49
 270:	51 f5       	brne	.+84     	; 0x2c6 <send_product_number+0x6e>
 272:	0e c0       	rjmp	.+28     	; 0x290 <send_product_number+0x38>
 274:	0e 94 b3 00 	call	0x166	; 0x166 <keypad_getkey>
 278:	18 2f       	mov	r17, r24
 27a:	2f ef       	ldi	r18, 0xFF	; 255
 27c:	80 e7       	ldi	r24, 0x70	; 112
 27e:	92 e0       	ldi	r25, 0x02	; 2
 280:	21 50       	subi	r18, 0x01	; 1
 282:	80 40       	sbci	r24, 0x00	; 0
 284:	90 40       	sbci	r25, 0x00	; 0
 286:	e1 f7       	brne	.-8      	; 0x280 <send_product_number+0x28>
 288:	00 c0       	rjmp	.+0      	; 0x28a <send_product_number+0x32>
 28a:	00 00       	nop
 28c:	e2 96       	adiw	r28, 0x32	; 50
 28e:	03 c0       	rjmp	.+6      	; 0x296 <send_product_number+0x3e>
 290:	c0 e0       	ldi	r28, 0x00	; 0
 292:	d0 e0       	ldi	r29, 0x00	; 0
 294:	10 e0       	ldi	r17, 0x00	; 0
 296:	11 11       	cpse	r17, r1
 298:	04 c0       	rjmp	.+8      	; 0x2a2 <send_product_number+0x4a>
 29a:	c4 3c       	cpi	r28, 0xC4	; 196
 29c:	29 e0       	ldi	r18, 0x09	; 9
 29e:	d2 07       	cpc	r29, r18
 2a0:	48 f3       	brcs	.-46     	; 0x274 <send_product_number+0x1c>
 2a2:	8f ec       	ldi	r24, 0xCF	; 207
 2a4:	81 0f       	add	r24, r17
 2a6:	83 30       	cpi	r24, 0x03	; 3
 2a8:	38 f4       	brcc	.+14     	; 0x2b8 <send_product_number+0x60>
 2aa:	80 2f       	mov	r24, r16
 2ac:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <uart_send>
 2b0:	81 2f       	mov	r24, r17
 2b2:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <uart_send>
 2b6:	1b c0       	rjmp	.+54     	; 0x2ee <send_product_number+0x96>
 2b8:	80 e3       	ldi	r24, 0x30	; 48
 2ba:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <uart_send>
 2be:	81 e3       	ldi	r24, 0x31	; 49
 2c0:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <uart_send>
 2c4:	14 c0       	rjmp	.+40     	; 0x2ee <send_product_number+0x96>
 2c6:	8e ec       	ldi	r24, 0xCE	; 206
 2c8:	80 0f       	add	r24, r16
 2ca:	82 30       	cpi	r24, 0x02	; 2
 2cc:	30 f0       	brcs	.+12     	; 0x2da <send_product_number+0x82>
 2ce:	07 33       	cpi	r16, 0x37	; 55
 2d0:	21 f0       	breq	.+8      	; 0x2da <send_product_number+0x82>
 2d2:	08 33       	cpi	r16, 0x38	; 56
 2d4:	11 f0       	breq	.+4      	; 0x2da <send_product_number+0x82>
 2d6:	09 33       	cpi	r16, 0x39	; 57
 2d8:	39 f4       	brne	.+14     	; 0x2e8 <send_product_number+0x90>
 2da:	80 e3       	ldi	r24, 0x30	; 48
 2dc:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <uart_send>
 2e0:	80 2f       	mov	r24, r16
 2e2:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <uart_send>
 2e6:	03 c0       	rjmp	.+6      	; 0x2ee <send_product_number+0x96>
 2e8:	85 e4       	ldi	r24, 0x45	; 69
 2ea:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <uart_send>
 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	1f 91       	pop	r17
 2f4:	0f 91       	pop	r16
 2f6:	08 95       	ret

Disassembly of section .text.debounce:

000004be <debounce>:
 4be:	58 2f       	mov	r21, r24
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	40 e0       	ldi	r20, 0x00	; 0
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	16 c0       	rjmp	.+44     	; 0x4f4 <debounce+0x36>
 4c8:	ef e3       	ldi	r30, 0x3F	; 63
 4ca:	fc e9       	ldi	r31, 0x9C	; 156
 4cc:	31 97       	sbiw	r30, 0x01	; 1
 4ce:	f1 f7       	brne	.-4      	; 0x4cc <debounce+0xe>
 4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <debounce+0x14>
 4d2:	00 00       	nop
 4d4:	80 b1       	in	r24, 0x00	; 0
 4d6:	21 e0       	ldi	r18, 0x01	; 1
 4d8:	30 e0       	ldi	r19, 0x00	; 0
 4da:	05 2e       	mov	r0, r21
 4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <debounce+0x24>
 4de:	22 0f       	add	r18, r18
 4e0:	33 1f       	adc	r19, r19
 4e2:	0a 94       	dec	r0
 4e4:	e2 f7       	brpl	.-8      	; 0x4de <debounce+0x20>
 4e6:	82 23       	and	r24, r18
 4e8:	48 13       	cpse	r20, r24
 4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <debounce+0x32>
 4ec:	9f 5f       	subi	r25, 0xFF	; 255
 4ee:	01 c0       	rjmp	.+2      	; 0x4f2 <debounce+0x34>
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	48 2f       	mov	r20, r24
 4f4:	97 30       	cpi	r25, 0x07	; 7
 4f6:	40 f3       	brcs	.-48     	; 0x4c8 <debounce+0xa>
 4f8:	08 95       	ret

Disassembly of section .text.keypad_init:

00000582 <keypad_init>:
 582:	81 b1       	in	r24, 0x01	; 1
 584:	80 6f       	ori	r24, 0xF0	; 240
 586:	81 b9       	out	0x01, r24	; 1
 588:	82 b1       	in	r24, 0x02	; 2
 58a:	8f 70       	andi	r24, 0x0F	; 15
 58c:	82 b9       	out	0x02, r24	; 2
 58e:	81 b1       	in	r24, 0x01	; 1
 590:	80 7f       	andi	r24, 0xF0	; 240
 592:	81 b9       	out	0x01, r24	; 1
 594:	82 b1       	in	r24, 0x02	; 2
 596:	8f 60       	ori	r24, 0x0F	; 15
 598:	82 b9       	out	0x02, r24	; 2
 59a:	08 95       	ret

Disassembly of section .text.keypad_getkey:

00000166 <keypad_getkey>:
 166:	6f 92       	push	r6
 168:	7f 92       	push	r7
 16a:	9f 92       	push	r9
 16c:	af 92       	push	r10
 16e:	cf 92       	push	r12
 170:	df 92       	push	r13
 172:	ef 92       	push	r14
 174:	ff 92       	push	r15
 176:	0f 93       	push	r16
 178:	1f 93       	push	r17
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
 17e:	cd b7       	in	r28, 0x3d	; 61
 180:	de b7       	in	r29, 0x3e	; 62
 182:	60 97       	sbiw	r28, 0x10	; 16
 184:	0f b6       	in	r0, 0x3f	; 63
 186:	f8 94       	cli
 188:	de bf       	out	0x3e, r29	; 62
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	cd bf       	out	0x3d, r28	; 61
 18e:	80 e1       	ldi	r24, 0x10	; 16
 190:	e0 e0       	ldi	r30, 0x00	; 0
 192:	f2 e0       	ldi	r31, 0x02	; 2
 194:	de 01       	movw	r26, r28
 196:	11 96       	adiw	r26, 0x01	; 1
 198:	01 90       	ld	r0, Z+
 19a:	0d 92       	st	X+, r0
 19c:	8a 95       	dec	r24
 19e:	e1 f7       	brne	.-8      	; 0x198 <keypad_getkey+0x32>
 1a0:	a1 2c       	mov	r10, r1
 1a2:	42 c0       	rjmp	.+132    	; 0x228 <keypad_getkey+0xc2>
 1a4:	82 b1       	in	r24, 0x02	; 2
 1a6:	ea 2c       	mov	r14, r10
 1a8:	f1 2c       	mov	r15, r1
 1aa:	97 01       	movw	r18, r14
 1ac:	2c 5f       	subi	r18, 0xFC	; 252
 1ae:	3f 4f       	sbci	r19, 0xFF	; 255
 1b0:	01 e0       	ldi	r16, 0x01	; 1
 1b2:	10 e0       	ldi	r17, 0x00	; 0
 1b4:	38 01       	movw	r6, r16
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <keypad_getkey+0x56>
 1b8:	66 0c       	add	r6, r6
 1ba:	77 1c       	adc	r7, r7
 1bc:	2a 95       	dec	r18
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <keypad_getkey+0x52>
 1c0:	96 2c       	mov	r9, r6
 1c2:	96 2d       	mov	r25, r6
 1c4:	90 95       	com	r25
 1c6:	89 23       	and	r24, r25
 1c8:	82 b9       	out	0x02, r24	; 2
 1ca:	10 e0       	ldi	r17, 0x00	; 0
 1cc:	26 c0       	rjmp	.+76     	; 0x21a <keypad_getkey+0xb4>
 1ce:	80 b1       	in	r24, 0x00	; 0
 1d0:	c1 2e       	mov	r12, r17
 1d2:	d1 2c       	mov	r13, r1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	01 2e       	mov	r0, r17
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <keypad_getkey+0x78>
 1da:	95 95       	asr	r25
 1dc:	87 95       	ror	r24
 1de:	0a 94       	dec	r0
 1e0:	e2 f7       	brpl	.-8      	; 0x1da <keypad_getkey+0x74>
 1e2:	80 fd       	sbrc	r24, 0
 1e4:	19 c0       	rjmp	.+50     	; 0x218 <keypad_getkey+0xb2>
 1e6:	64 e0       	ldi	r22, 0x04	; 4
 1e8:	6a 0d       	add	r22, r10
 1ea:	81 2f       	mov	r24, r17
 1ec:	0e 94 5f 02 	call	0x4be	; 0x4be <debounce>
 1f0:	88 23       	and	r24, r24
 1f2:	91 f0       	breq	.+36     	; 0x218 <keypad_getkey+0xb2>
 1f4:	82 b1       	in	r24, 0x02	; 2
 1f6:	98 2a       	or	r9, r24
 1f8:	92 b8       	out	0x02, r9	; 2
 1fa:	cc 0c       	add	r12, r12
 1fc:	dd 1c       	adc	r13, r13
 1fe:	cc 0c       	add	r12, r12
 200:	dd 1c       	adc	r13, r13
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	8c 0f       	add	r24, r28
 208:	9d 1f       	adc	r25, r29
 20a:	c8 0e       	add	r12, r24
 20c:	d9 1e       	adc	r13, r25
 20e:	f6 01       	movw	r30, r12
 210:	ee 0d       	add	r30, r14
 212:	ff 1d       	adc	r31, r15
 214:	80 81       	ld	r24, Z
 216:	0d c0       	rjmp	.+26     	; 0x232 <keypad_getkey+0xcc>
 218:	1f 5f       	subi	r17, 0xFF	; 255
 21a:	14 30       	cpi	r17, 0x04	; 4
 21c:	c0 f2       	brcs	.-80     	; 0x1ce <keypad_getkey+0x68>
 21e:	82 b1       	in	r24, 0x02	; 2
 220:	08 2f       	mov	r16, r24
 222:	06 29       	or	r16, r6
 224:	02 b9       	out	0x02, r16	; 2
 226:	a3 94       	inc	r10
 228:	93 e0       	ldi	r25, 0x03	; 3
 22a:	9a 15       	cp	r25, r10
 22c:	08 f0       	brcs	.+2      	; 0x230 <keypad_getkey+0xca>
 22e:	ba cf       	rjmp	.-140    	; 0x1a4 <keypad_getkey+0x3e>
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	60 96       	adiw	r28, 0x10	; 16
 234:	0f b6       	in	r0, 0x3f	; 63
 236:	f8 94       	cli
 238:	de bf       	out	0x3e, r29	; 62
 23a:	0f be       	out	0x3f, r0	; 63
 23c:	cd bf       	out	0x3d, r28	; 61
 23e:	df 91       	pop	r29
 240:	cf 91       	pop	r28
 242:	1f 91       	pop	r17
 244:	0f 91       	pop	r16
 246:	ff 90       	pop	r15
 248:	ef 90       	pop	r14
 24a:	df 90       	pop	r13
 24c:	cf 90       	pop	r12
 24e:	af 90       	pop	r10
 250:	9f 90       	pop	r9
 252:	7f 90       	pop	r7
 254:	6f 90       	pop	r6
 256:	08 95       	ret

Disassembly of section .text.libgcc.div:

0000047a <__udivmodsi4>:
 47a:	a1 e2       	ldi	r26, 0x21	; 33
 47c:	1a 2e       	mov	r1, r26
 47e:	aa 1b       	sub	r26, r26
 480:	bb 1b       	sub	r27, r27
 482:	fd 01       	movw	r30, r26
 484:	0d c0       	rjmp	.+26     	; 0x4a0 <__udivmodsi4_ep>

00000486 <__udivmodsi4_loop>:
 486:	aa 1f       	adc	r26, r26
 488:	bb 1f       	adc	r27, r27
 48a:	ee 1f       	adc	r30, r30
 48c:	ff 1f       	adc	r31, r31
 48e:	a2 17       	cp	r26, r18
 490:	b3 07       	cpc	r27, r19
 492:	e4 07       	cpc	r30, r20
 494:	f5 07       	cpc	r31, r21
 496:	20 f0       	brcs	.+8      	; 0x4a0 <__udivmodsi4_ep>
 498:	a2 1b       	sub	r26, r18
 49a:	b3 0b       	sbc	r27, r19
 49c:	e4 0b       	sbc	r30, r20
 49e:	f5 0b       	sbc	r31, r21

000004a0 <__udivmodsi4_ep>:
 4a0:	66 1f       	adc	r22, r22
 4a2:	77 1f       	adc	r23, r23
 4a4:	88 1f       	adc	r24, r24
 4a6:	99 1f       	adc	r25, r25
 4a8:	1a 94       	dec	r1
 4aa:	69 f7       	brne	.-38     	; 0x486 <__udivmodsi4_loop>
 4ac:	60 95       	com	r22
 4ae:	70 95       	com	r23
 4b0:	80 95       	com	r24
 4b2:	90 95       	com	r25
 4b4:	9b 01       	movw	r18, r22
 4b6:	ac 01       	movw	r20, r24
 4b8:	bd 01       	movw	r22, r26
 4ba:	cf 01       	movw	r24, r30
 4bc:	08 95       	ret

Disassembly of section .text.libgcc:

000005d4 <__xload_1>:
 5d4:	57 fd       	sbrc	r21, 7
 5d6:	03 c0       	rjmp	.+6      	; 0x5de <__xload_1+0xa>
 5d8:	5b bf       	out	0x3b, r21	; 59
 5da:	67 91       	elpm	r22, Z+
 5dc:	08 95       	ret
 5de:	60 81       	ld	r22, Z
 5e0:	08 95       	ret

Disassembly of section .text.__dummy_fini:

000005ea <_fini>:
 5ea:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000005ec <__funcs_on_exit>:
 5ec:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000005ee <__simulator_exit>:
 5ee:	08 95       	ret

Disassembly of section .text.exit:

0000059c <exit>:
 59c:	ec 01       	movw	r28, r24
 59e:	0e 94 f6 02 	call	0x5ec	; 0x5ec <__funcs_on_exit>
 5a2:	0e 94 f5 02 	call	0x5ea	; 0x5ea <_fini>
 5a6:	ce 01       	movw	r24, r28
 5a8:	0e 94 f7 02 	call	0x5ee	; 0x5ee <__simulator_exit>
 5ac:	ce 01       	movw	r24, r28
 5ae:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <_Exit>

Disassembly of section .text._Exit:

000005e6 <_Exit>:
 5e6:	0e 94 a2 00 	call	0x144	; 0x144 <_exit>
