
microprocessadores-t1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  000005c8  0000067c  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000148  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000067c  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000002a  00000000  00000000  000006ab  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000f8  00000000  00000000  000006d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000022da  00000000  00000000  000007cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001028  00000000  00000000  00002aa7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009f8  00000000  00000000  00003acf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000023c  00000000  00000000  000044c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000048a  00000000  00000000  00004704  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000950  00000000  00000000  00004b8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  000054de  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000005aa  000005aa  0000065e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005598  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .progmemx.data 0000001d  00000148  00000148  000001fc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 15 .text.main    00000066  0000032c  0000032c  000003e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.write_command_LCD 00000066  00000392  00000392  00000446  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.init_LCD 0000004a  000003f8  000003f8  000004ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.write_data_LCD 0000006c  00000258  00000258  0000030c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.write_string_LCD 0000002e  000004f2  000004f2  000005a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.write_string_line 00000030  000004c2  000004c2  00000576  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.clear_display 00000014  0000057a  0000057a  0000062e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.uart_init 0000002a  00000520  00000520  000005d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.uart_send 0000000e  0000058e  0000058e  00000642  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.send_product_number 00000068  000002c4  000002c4  00000378  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.debounce 0000003c  00000486  00000486  0000053a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.keypad_init 0000001a  0000054a  0000054a  000005fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .rodata       00000010  00800200  000005b8  0000066c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 28 .text.keypad_getkey 000000f2  00000166  00000166  0000021a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.libgcc.div 00000044  00000442  00000442  000004f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.libgcc  0000000e  0000059c  0000059c  00000650  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.__dummy_fini 00000002  000005b2  000005b2  00000666  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.__dummy_funcs_on_exit 00000002  000005b4  000005b4  00000668  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.__dummy_simulator_exit 00000002  000005b6  000005b6  0000066a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.exit    00000016  00000564  00000564  00000618  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text._Exit   00000004  000005ae  000005ae  00000662  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 76 00 	jmp	0xec	; 0xec <__ctors_end>
   4:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
   8:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
   c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
  10:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
  14:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
  18:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
  1c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
  20:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
  24:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
  28:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
  2c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
  30:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
  34:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
  38:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
  3c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
  40:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
  44:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
  48:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
  4c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
  50:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
  54:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
  58:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
  5c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
  60:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
  64:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
  68:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
  6c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
  70:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
  74:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
  78:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
  7c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
  80:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
  84:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
  88:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
  8c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
  90:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
  94:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
  98:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
  9c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
  a0:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
  a4:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
  a8:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
  ac:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
  b0:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
  b4:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
  b8:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
  bc:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
  c0:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
  c4:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
  c8:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
  cc:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
  d0:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
  d4:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
  d8:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
  dc:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
  e0:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>

000000e4 <.dinit>:
  e4:	02 00       	.word	0x0002	; ????
  e6:	02 10       	cpse	r0, r2
  e8:	00 05       	cpc	r16, r0
  ea:	b8 00       	.word	0x00b8	; ????

000000ec <__ctors_end>:
  ec:	11 24       	eor	r1, r1
  ee:	1f be       	out	0x3f, r1	; 63
  f0:	cf ef       	ldi	r28, 0xFF	; 255
  f2:	d1 e2       	ldi	r29, 0x21	; 33
  f4:	de bf       	out	0x3e, r29	; 62
  f6:	cd bf       	out	0x3d, r28	; 61
  f8:	00 e0       	ldi	r16, 0x00	; 0
  fa:	0c bf       	out	0x3c, r16	; 60

000000fc <__do_copy_data>:
  fc:	e4 ee       	ldi	r30, 0xE4	; 228
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	40 e0       	ldi	r20, 0x00	; 0
 102:	19 c0       	rjmp	.+50     	; 0x136 <__do_clear_bss+0x8>
 104:	b7 91       	elpm	r27, Z+
 106:	a7 91       	elpm	r26, Z+
 108:	37 91       	elpm	r19, Z+
 10a:	27 91       	elpm	r18, Z+
 10c:	07 91       	elpm	r16, Z+
 10e:	07 fd       	sbrc	r16, 7
 110:	0e c0       	rjmp	.+28     	; 0x12e <__do_clear_bss>
 112:	97 91       	elpm	r25, Z+
 114:	87 91       	elpm	r24, Z+
 116:	ef 01       	movw	r28, r30
 118:	f9 2f       	mov	r31, r25
 11a:	e8 2f       	mov	r30, r24
 11c:	0b bf       	out	0x3b, r16	; 59
 11e:	07 90       	elpm	r0, Z+
 120:	0d 92       	st	X+, r0
 122:	a2 17       	cp	r26, r18
 124:	b3 07       	cpc	r27, r19
 126:	d9 f7       	brne	.-10     	; 0x11e <__do_copy_data+0x22>
 128:	fe 01       	movw	r30, r28
 12a:	1b be       	out	0x3b, r1	; 59
 12c:	04 c0       	rjmp	.+8      	; 0x136 <__do_clear_bss+0x8>

0000012e <__do_clear_bss>:
 12e:	1d 92       	st	X+, r1
 130:	a2 17       	cp	r26, r18
 132:	b3 07       	cpc	r27, r19
 134:	e1 f7       	brne	.-8      	; 0x12e <__do_clear_bss>
 136:	eb 3e       	cpi	r30, 0xEB	; 235
 138:	f4 07       	cpc	r31, r20
 13a:	21 f7       	brne	.-56     	; 0x104 <__do_copy_data+0x8>
 13c:	0e 94 96 01 	call	0x32c	; 0x32c <main>
 140:	0c 94 b2 02 	jmp	0x564	; 0x564 <exit>

00000144 <_exit>:
 144:	f8 94       	cli

00000146 <__stop_program>:
 146:	ff cf       	rjmp	.-2      	; 0x146 <__stop_program>

Disassembly of section .text:

000005aa <__bad_interrupt>:
 5aa:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

0000032c <main>:
//}


int main(void){
	// Inicializa o LCD
	init_LCD();
 32c:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <init_LCD>
	// Escreve uma mensagem no LCD
	write_string_line(1,"VenDELET");
 330:	48 e4       	ldi	r20, 0x48	; 72
 332:	51 e0       	ldi	r21, 0x01	; 1
 334:	60 e0       	ldi	r22, 0x00	; 0
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	0e 94 61 02 	call	0x4c2	; 0x4c2 <write_string_line>
	write_string_line(2,"Fais ton choix");
 33c:	41 e5       	ldi	r20, 0x51	; 81
 33e:	51 e0       	ldi	r21, 0x01	; 1
 340:	60 e0       	ldi	r22, 0x00	; 0
 342:	82 e0       	ldi	r24, 0x02	; 2
 344:	0e 94 61 02 	call	0x4c2	; 0x4c2 <write_string_line>

	// Inicializa o Teclado
	keypad_init();
 348:	0e 94 a5 02 	call	0x54a	; 0x54a <keypad_init>

	// Initialize the UART with desired baud rate
	uart_init(9600);
 34c:	60 e8       	ldi	r22, 0x80	; 128
 34e:	75 e2       	ldi	r23, 0x25	; 37
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	0e 94 90 02 	call	0x520	; 0x520 <uart_init>
    //sei();			// Ativa interrupt
	
	char key;
    while(1){
		// Get the pressed key
		key = keypad_getkey();
 358:	0e 94 b3 00 	call	0x166	; 0x166 <keypad_getkey>
 35c:	c8 2f       	mov	r28, r24
		
		if(key!=0){
 35e:	88 23       	and	r24, r24
 360:	d9 f3       	breq	.-10     	; 0x358 <main+0x2c>
			clear_display();
 362:	0e 94 bd 02 	call	0x57a	; 0x57a <clear_display>
			write_string_line(1,"Boa ");
 366:	40 e6       	ldi	r20, 0x60	; 96
 368:	51 e0       	ldi	r21, 0x01	; 1
 36a:	60 e0       	ldi	r22, 0x00	; 0
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	0e 94 61 02 	call	0x4c2	; 0x4c2 <write_string_line>
			//write_string_line(2,key);
			write_data_LCD(key);
 372:	8c 2f       	mov	r24, r28
 374:	0e 94 2c 01 	call	0x258	; 0x258 <write_data_LCD>
			//uart_send(key);
			send_product_number(key);
 378:	8c 2f       	mov	r24, r28
 37a:	0e 94 62 01 	call	0x2c4	; 0x2c4 <send_product_number>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 37e:	2f ef       	ldi	r18, 0xFF	; 255
 380:	85 ea       	ldi	r24, 0xA5	; 165
 382:	9e e0       	ldi	r25, 0x0E	; 14
 384:	21 50       	subi	r18, 0x01	; 1
 386:	80 40       	sbci	r24, 0x00	; 0
 388:	90 40       	sbci	r25, 0x00	; 0
 38a:	e1 f7       	brne	.-8      	; 0x384 <main+0x58>
 38c:	00 c0       	rjmp	.+0      	; 0x38e <main+0x62>
 38e:	00 00       	nop
 390:	e3 cf       	rjmp	.-58     	; 0x358 <main+0x2c>

Disassembly of section .text.write_command_LCD:

00000392 <write_command_LCD>:
 392:	95 b1       	in	r25, 0x05	; 5
 394:	9f 70       	andi	r25, 0x0F	; 15
 396:	28 2f       	mov	r18, r24
 398:	20 7f       	andi	r18, 0xF0	; 240
 39a:	92 2b       	or	r25, r18
 39c:	95 b9       	out	0x05, r25	; 5
 39e:	95 b1       	in	r25, 0x05	; 5
 3a0:	9e 7f       	andi	r25, 0xFE	; 254
 3a2:	95 b9       	out	0x05, r25	; 5
 3a4:	95 b1       	in	r25, 0x05	; 5
 3a6:	92 60       	ori	r25, 0x02	; 2
 3a8:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3aa:	35 e0       	ldi	r19, 0x05	; 5
 3ac:	3a 95       	dec	r19
 3ae:	f1 f7       	brne	.-4      	; 0x3ac <write_command_LCD+0x1a>
 3b0:	00 00       	nop
 3b2:	95 b1       	in	r25, 0x05	; 5
 3b4:	9d 7f       	andi	r25, 0xFD	; 253
 3b6:	95 b9       	out	0x05, r25	; 5
 3b8:	ef e1       	ldi	r30, 0x1F	; 31
 3ba:	f3 e0       	ldi	r31, 0x03	; 3
 3bc:	31 97       	sbiw	r30, 0x01	; 1
 3be:	f1 f7       	brne	.-4      	; 0x3bc <write_command_LCD+0x2a>
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <write_command_LCD+0x30>
 3c2:	00 00       	nop
 3c4:	25 b1       	in	r18, 0x05	; 5
 3c6:	f0 e1       	ldi	r31, 0x10	; 16
 3c8:	8f 9f       	mul	r24, r31
 3ca:	c0 01       	movw	r24, r0
 3cc:	11 24       	eor	r1, r1
 3ce:	92 2f       	mov	r25, r18
 3d0:	9f 70       	andi	r25, 0x0F	; 15
 3d2:	89 2b       	or	r24, r25
 3d4:	85 b9       	out	0x05, r24	; 5
 3d6:	85 b1       	in	r24, 0x05	; 5
 3d8:	82 60       	ori	r24, 0x02	; 2
 3da:	85 b9       	out	0x05, r24	; 5
 3dc:	35 e0       	ldi	r19, 0x05	; 5
 3de:	3a 95       	dec	r19
 3e0:	f1 f7       	brne	.-4      	; 0x3de <write_command_LCD+0x4c>
 3e2:	00 00       	nop
 3e4:	85 b1       	in	r24, 0x05	; 5
 3e6:	8d 7f       	andi	r24, 0xFD	; 253
 3e8:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ea:	8f e3       	ldi	r24, 0x3F	; 63
 3ec:	9f e1       	ldi	r25, 0x1F	; 31
 3ee:	01 97       	sbiw	r24, 0x01	; 1
 3f0:	f1 f7       	brne	.-4      	; 0x3ee <write_command_LCD+0x5c>
 3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <write_command_LCD+0x62>
 3f4:	00 00       	nop
 3f6:	08 95       	ret

Disassembly of section .text.init_LCD:

000003f8 <init_LCD>:
 3f8:	84 b1       	in	r24, 0x04	; 4
 3fa:	83 6f       	ori	r24, 0xF3	; 243
 3fc:	84 b9       	out	0x04, r24	; 4
 3fe:	2f ef       	ldi	r18, 0xFF	; 255
 400:	80 e7       	ldi	r24, 0x70	; 112
 402:	92 e0       	ldi	r25, 0x02	; 2
 404:	21 50       	subi	r18, 0x01	; 1
 406:	80 40       	sbci	r24, 0x00	; 0
 408:	90 40       	sbci	r25, 0x00	; 0
 40a:	e1 f7       	brne	.-8      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 40c:	00 c0       	rjmp	.+0      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 40e:	00 00       	nop
 410:	83 e3       	ldi	r24, 0x33	; 51
 412:	0e 94 c9 01 	call	0x392	; 0x392 <write_command_LCD>
 416:	82 e3       	ldi	r24, 0x32	; 50
 418:	0e 94 c9 01 	call	0x392	; 0x392 <write_command_LCD>
 41c:	88 e2       	ldi	r24, 0x28	; 40
 41e:	0e 94 c9 01 	call	0x392	; 0x392 <write_command_LCD>
 422:	8c e0       	ldi	r24, 0x0C	; 12
 424:	0e 94 c9 01 	call	0x392	; 0x392 <write_command_LCD>
 428:	86 e0       	ldi	r24, 0x06	; 6
 42a:	0e 94 c9 01 	call	0x392	; 0x392 <write_command_LCD>
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	0e 94 c9 01 	call	0x392	; 0x392 <write_command_LCD>
 434:	8f e3       	ldi	r24, 0x3F	; 63
 436:	9f e1       	ldi	r25, 0x1F	; 31
 438:	01 97       	sbiw	r24, 0x01	; 1
 43a:	f1 f7       	brne	.-4      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 43c:	00 c0       	rjmp	.+0      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 43e:	00 00       	nop
 440:	08 95       	ret

Disassembly of section .text.write_data_LCD:

00000258 <write_data_LCD>:
 258:	95 b1       	in	r25, 0x05	; 5
 25a:	9f 70       	andi	r25, 0x0F	; 15
 25c:	28 2f       	mov	r18, r24
 25e:	20 7f       	andi	r18, 0xF0	; 240
 260:	92 2b       	or	r25, r18
 262:	95 b9       	out	0x05, r25	; 5
 264:	95 b1       	in	r25, 0x05	; 5
 266:	91 60       	ori	r25, 0x01	; 1
 268:	95 b9       	out	0x05, r25	; 5
 26a:	95 b1       	in	r25, 0x05	; 5
 26c:	92 60       	ori	r25, 0x02	; 2
 26e:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 270:	35 e0       	ldi	r19, 0x05	; 5
 272:	3a 95       	dec	r19
 274:	f1 f7       	brne	.-4      	; 0x272 <write_data_LCD+0x1a>
 276:	00 00       	nop
 278:	95 b1       	in	r25, 0x05	; 5
 27a:	9d 7f       	andi	r25, 0xFD	; 253
 27c:	95 b9       	out	0x05, r25	; 5
 27e:	ef e1       	ldi	r30, 0x1F	; 31
 280:	f3 e0       	ldi	r31, 0x03	; 3
 282:	31 97       	sbiw	r30, 0x01	; 1
 284:	f1 f7       	brne	.-4      	; 0x282 <write_data_LCD+0x2a>
 286:	00 c0       	rjmp	.+0      	; 0x288 <write_data_LCD+0x30>
 288:	00 00       	nop
 28a:	25 b1       	in	r18, 0x05	; 5
 28c:	f0 e1       	ldi	r31, 0x10	; 16
 28e:	8f 9f       	mul	r24, r31
 290:	c0 01       	movw	r24, r0
 292:	11 24       	eor	r1, r1
 294:	92 2f       	mov	r25, r18
 296:	9f 70       	andi	r25, 0x0F	; 15
 298:	89 2b       	or	r24, r25
 29a:	85 b9       	out	0x05, r24	; 5
 29c:	85 b1       	in	r24, 0x05	; 5
 29e:	81 60       	ori	r24, 0x01	; 1
 2a0:	85 b9       	out	0x05, r24	; 5
 2a2:	85 b1       	in	r24, 0x05	; 5
 2a4:	82 60       	ori	r24, 0x02	; 2
 2a6:	85 b9       	out	0x05, r24	; 5
 2a8:	35 e0       	ldi	r19, 0x05	; 5
 2aa:	3a 95       	dec	r19
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <write_data_LCD+0x52>
 2ae:	00 00       	nop
 2b0:	85 b1       	in	r24, 0x05	; 5
 2b2:	8d 7f       	andi	r24, 0xFD	; 253
 2b4:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b6:	8f e3       	ldi	r24, 0x3F	; 63
 2b8:	9f e1       	ldi	r25, 0x1F	; 31
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <write_data_LCD+0x62>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <write_data_LCD+0x68>
 2c0:	00 00       	nop
 2c2:	08 95       	ret

Disassembly of section .text.write_string_LCD:

000004f2 <write_string_LCD>:
 4f2:	cf 92       	push	r12
 4f4:	df 92       	push	r13
 4f6:	ef 92       	push	r14
 4f8:	6b 01       	movw	r12, r22
 4fa:	e8 2e       	mov	r14, r24
 4fc:	07 c0       	rjmp	.+14     	; 0x50c <write_string_LCD+0x1a>
 4fe:	8f ef       	ldi	r24, 0xFF	; 255
 500:	c8 1a       	sub	r12, r24
 502:	d8 0a       	sbc	r13, r24
 504:	e8 0a       	sbc	r14, r24
 506:	86 2f       	mov	r24, r22
 508:	0e 94 2c 01 	call	0x258	; 0x258 <write_data_LCD>
 50c:	f6 01       	movw	r30, r12
 50e:	5e 2d       	mov	r21, r14
 510:	0e 94 ce 02 	call	0x59c	; 0x59c <__xload_1>
 514:	61 11       	cpse	r22, r1
 516:	f3 cf       	rjmp	.-26     	; 0x4fe <write_string_LCD+0xc>
 518:	ef 90       	pop	r14
 51a:	df 90       	pop	r13
 51c:	cf 90       	pop	r12
 51e:	08 95       	ret

Disassembly of section .text.write_string_line:

000004c2 <write_string_line>:
 4c2:	cf 92       	push	r12
 4c4:	df 92       	push	r13
 4c6:	ef 92       	push	r14
 4c8:	6a 01       	movw	r12, r20
 4ca:	e6 2e       	mov	r14, r22
 4cc:	81 30       	cpi	r24, 0x01	; 1
 4ce:	21 f4       	brne	.+8      	; 0x4d8 <write_string_line+0x16>
 4d0:	80 e8       	ldi	r24, 0x80	; 128
 4d2:	0e 94 c9 01 	call	0x392	; 0x392 <write_command_LCD>
 4d6:	05 c0       	rjmp	.+10     	; 0x4e2 <write_string_line+0x20>
 4d8:	82 30       	cpi	r24, 0x02	; 2
 4da:	19 f4       	brne	.+6      	; 0x4e2 <write_string_line+0x20>
 4dc:	80 ec       	ldi	r24, 0xC0	; 192
 4de:	0e 94 c9 01 	call	0x392	; 0x392 <write_command_LCD>
 4e2:	8e 2d       	mov	r24, r14
 4e4:	b6 01       	movw	r22, r12
 4e6:	0e 94 79 02 	call	0x4f2	; 0x4f2 <write_string_LCD>
 4ea:	ef 90       	pop	r14
 4ec:	df 90       	pop	r13
 4ee:	cf 90       	pop	r12
 4f0:	08 95       	ret

Disassembly of section .text.clear_display:

0000057a <clear_display>:
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	0e 94 c9 01 	call	0x392	; 0x392 <write_command_LCD>
 580:	8f e3       	ldi	r24, 0x3F	; 63
 582:	9f e1       	ldi	r25, 0x1F	; 31
 584:	01 97       	sbiw	r24, 0x01	; 1
 586:	f1 f7       	brne	.-4      	; 0x584 <clear_display+0xa>
 588:	00 c0       	rjmp	.+0      	; 0x58a <clear_display+0x10>
 58a:	00 00       	nop
 58c:	08 95       	ret

Disassembly of section .text.uart_init:

00000520 <uart_init>:

unsigned char uart_receive(void) {
	// Wait for data to be received
	while (!(UCSR0A & (1 << RXC0)));
	return UDR0;
}
 520:	9b 01       	movw	r18, r22
 522:	ac 01       	movw	r20, r24
 524:	60 e4       	ldi	r22, 0x40	; 64
 526:	72 e4       	ldi	r23, 0x42	; 66
 528:	8f e0       	ldi	r24, 0x0F	; 15
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	0e 94 21 02 	call	0x442	; 0x442 <__udivmodsi4>
 530:	21 50       	subi	r18, 0x01	; 1
 532:	31 09       	sbc	r19, r1
 534:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 538:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 53c:	88 e1       	ldi	r24, 0x18	; 24
 53e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
 542:	86 e0       	ldi	r24, 0x06	; 6
 544:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
 548:	08 95       	ret

Disassembly of section .text.uart_send:

0000058e <uart_send>:

void uart_send(unsigned char data) {
	// Wait for empty transmit buffer
	while (!(UCSR0A & (1 << UDRE0)));
 58e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 592:	95 ff       	sbrs	r25, 5
 594:	fc cf       	rjmp	.-8      	; 0x58e <uart_send>
	// Put data into buffer, sends the data
	UDR0 = data;
 596:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 59a:	08 95       	ret

Disassembly of section .text.send_product_number:

000002c4 <send_product_number>:

unsigned char uart_receive(void) {
	// Wait for data to be received
	while (!(UCSR0A & (1 << RXC0)));
	return UDR0;
}
 2c4:	cf 93       	push	r28
 2c6:	df 93       	push	r29
 2c8:	c8 2f       	mov	r28, r24
 2ca:	86 e5       	ldi	r24, 0x56	; 86
 2cc:	0e 94 c7 02 	call	0x58e	; 0x58e <uart_send>
 2d0:	80 e5       	ldi	r24, 0x50	; 80
 2d2:	0e 94 c7 02 	call	0x58e	; 0x58e <uart_send>
 2d6:	c1 33       	cpi	r28, 0x31	; 49
 2d8:	91 f4       	brne	.+36     	; 0x2fe <send_product_number+0x3a>
 2da:	0e 94 b3 00 	call	0x166	; 0x166 <keypad_getkey>
 2de:	d8 2f       	mov	r29, r24
 2e0:	8f ec       	ldi	r24, 0xCF	; 207
 2e2:	8d 0f       	add	r24, r29
 2e4:	83 30       	cpi	r24, 0x03	; 3
 2e6:	38 f4       	brcc	.+14     	; 0x2f6 <send_product_number+0x32>
 2e8:	8c 2f       	mov	r24, r28
 2ea:	0e 94 c7 02 	call	0x58e	; 0x58e <uart_send>
 2ee:	8d 2f       	mov	r24, r29
 2f0:	0e 94 c7 02 	call	0x58e	; 0x58e <uart_send>
 2f4:	18 c0       	rjmp	.+48     	; 0x326 <send_product_number+0x62>
 2f6:	85 e4       	ldi	r24, 0x45	; 69
 2f8:	0e 94 c7 02 	call	0x58e	; 0x58e <uart_send>
 2fc:	14 c0       	rjmp	.+40     	; 0x326 <send_product_number+0x62>
 2fe:	8e ec       	ldi	r24, 0xCE	; 206
 300:	8c 0f       	add	r24, r28
 302:	82 30       	cpi	r24, 0x02	; 2
 304:	30 f0       	brcs	.+12     	; 0x312 <send_product_number+0x4e>
 306:	c7 33       	cpi	r28, 0x37	; 55
 308:	21 f0       	breq	.+8      	; 0x312 <send_product_number+0x4e>
 30a:	c8 33       	cpi	r28, 0x38	; 56
 30c:	11 f0       	breq	.+4      	; 0x312 <send_product_number+0x4e>
 30e:	c9 33       	cpi	r28, 0x39	; 57
 310:	39 f4       	brne	.+14     	; 0x320 <send_product_number+0x5c>
 312:	80 e3       	ldi	r24, 0x30	; 48
 314:	0e 94 c7 02 	call	0x58e	; 0x58e <uart_send>
 318:	8c 2f       	mov	r24, r28
 31a:	0e 94 c7 02 	call	0x58e	; 0x58e <uart_send>
 31e:	03 c0       	rjmp	.+6      	; 0x326 <send_product_number+0x62>
 320:	85 e4       	ldi	r24, 0x45	; 69
 322:	0e 94 c7 02 	call	0x58e	; 0x58e <uart_send>
 326:	df 91       	pop	r29
 328:	cf 91       	pop	r28
 32a:	08 95       	ret

Disassembly of section .text.debounce:

00000486 <debounce>:
 486:	58 2f       	mov	r21, r24
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	40 e0       	ldi	r20, 0x00	; 0
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	16 c0       	rjmp	.+44     	; 0x4bc <debounce+0x36>
 490:	ef e3       	ldi	r30, 0x3F	; 63
 492:	fc e9       	ldi	r31, 0x9C	; 156
 494:	31 97       	sbiw	r30, 0x01	; 1
 496:	f1 f7       	brne	.-4      	; 0x494 <debounce+0xe>
 498:	00 c0       	rjmp	.+0      	; 0x49a <debounce+0x14>
 49a:	00 00       	nop
 49c:	80 b1       	in	r24, 0x00	; 0
 49e:	21 e0       	ldi	r18, 0x01	; 1
 4a0:	30 e0       	ldi	r19, 0x00	; 0
 4a2:	05 2e       	mov	r0, r21
 4a4:	02 c0       	rjmp	.+4      	; 0x4aa <debounce+0x24>
 4a6:	22 0f       	add	r18, r18
 4a8:	33 1f       	adc	r19, r19
 4aa:	0a 94       	dec	r0
 4ac:	e2 f7       	brpl	.-8      	; 0x4a6 <debounce+0x20>
 4ae:	82 23       	and	r24, r18
 4b0:	48 13       	cpse	r20, r24
 4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <debounce+0x32>
 4b4:	9f 5f       	subi	r25, 0xFF	; 255
 4b6:	01 c0       	rjmp	.+2      	; 0x4ba <debounce+0x34>
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	48 2f       	mov	r20, r24
 4bc:	97 30       	cpi	r25, 0x07	; 7
 4be:	40 f3       	brcs	.-48     	; 0x490 <debounce+0xa>
 4c0:	08 95       	ret

Disassembly of section .text.keypad_init:

0000054a <keypad_init>:
 54a:	81 b1       	in	r24, 0x01	; 1
 54c:	80 6f       	ori	r24, 0xF0	; 240
 54e:	81 b9       	out	0x01, r24	; 1
 550:	82 b1       	in	r24, 0x02	; 2
 552:	8f 70       	andi	r24, 0x0F	; 15
 554:	82 b9       	out	0x02, r24	; 2
 556:	81 b1       	in	r24, 0x01	; 1
 558:	80 7f       	andi	r24, 0xF0	; 240
 55a:	81 b9       	out	0x01, r24	; 1
 55c:	82 b1       	in	r24, 0x02	; 2
 55e:	8f 60       	ori	r24, 0x0F	; 15
 560:	82 b9       	out	0x02, r24	; 2
 562:	08 95       	ret

Disassembly of section .text.keypad_getkey:

00000166 <keypad_getkey>:
 166:	6f 92       	push	r6
 168:	7f 92       	push	r7
 16a:	9f 92       	push	r9
 16c:	af 92       	push	r10
 16e:	cf 92       	push	r12
 170:	df 92       	push	r13
 172:	ef 92       	push	r14
 174:	ff 92       	push	r15
 176:	0f 93       	push	r16
 178:	1f 93       	push	r17
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
 17e:	cd b7       	in	r28, 0x3d	; 61
 180:	de b7       	in	r29, 0x3e	; 62
 182:	60 97       	sbiw	r28, 0x10	; 16
 184:	0f b6       	in	r0, 0x3f	; 63
 186:	f8 94       	cli
 188:	de bf       	out	0x3e, r29	; 62
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	cd bf       	out	0x3d, r28	; 61
 18e:	80 e1       	ldi	r24, 0x10	; 16
 190:	e0 e0       	ldi	r30, 0x00	; 0
 192:	f2 e0       	ldi	r31, 0x02	; 2
 194:	de 01       	movw	r26, r28
 196:	11 96       	adiw	r26, 0x01	; 1
 198:	01 90       	ld	r0, Z+
 19a:	0d 92       	st	X+, r0
 19c:	8a 95       	dec	r24
 19e:	e1 f7       	brne	.-8      	; 0x198 <keypad_getkey+0x32>
 1a0:	a1 2c       	mov	r10, r1
 1a2:	42 c0       	rjmp	.+132    	; 0x228 <keypad_getkey+0xc2>
 1a4:	82 b1       	in	r24, 0x02	; 2
 1a6:	ea 2c       	mov	r14, r10
 1a8:	f1 2c       	mov	r15, r1
 1aa:	97 01       	movw	r18, r14
 1ac:	2c 5f       	subi	r18, 0xFC	; 252
 1ae:	3f 4f       	sbci	r19, 0xFF	; 255
 1b0:	01 e0       	ldi	r16, 0x01	; 1
 1b2:	10 e0       	ldi	r17, 0x00	; 0
 1b4:	38 01       	movw	r6, r16
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <keypad_getkey+0x56>
 1b8:	66 0c       	add	r6, r6
 1ba:	77 1c       	adc	r7, r7
 1bc:	2a 95       	dec	r18
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <keypad_getkey+0x52>
 1c0:	96 2c       	mov	r9, r6
 1c2:	96 2d       	mov	r25, r6
 1c4:	90 95       	com	r25
 1c6:	89 23       	and	r24, r25
 1c8:	82 b9       	out	0x02, r24	; 2
 1ca:	10 e0       	ldi	r17, 0x00	; 0
 1cc:	26 c0       	rjmp	.+76     	; 0x21a <keypad_getkey+0xb4>
 1ce:	80 b1       	in	r24, 0x00	; 0
 1d0:	c1 2e       	mov	r12, r17
 1d2:	d1 2c       	mov	r13, r1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	01 2e       	mov	r0, r17
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <keypad_getkey+0x78>
 1da:	95 95       	asr	r25
 1dc:	87 95       	ror	r24
 1de:	0a 94       	dec	r0
 1e0:	e2 f7       	brpl	.-8      	; 0x1da <keypad_getkey+0x74>
 1e2:	80 fd       	sbrc	r24, 0
 1e4:	19 c0       	rjmp	.+50     	; 0x218 <keypad_getkey+0xb2>
 1e6:	64 e0       	ldi	r22, 0x04	; 4
 1e8:	6a 0d       	add	r22, r10
 1ea:	81 2f       	mov	r24, r17
 1ec:	0e 94 43 02 	call	0x486	; 0x486 <debounce>
 1f0:	88 23       	and	r24, r24
 1f2:	91 f0       	breq	.+36     	; 0x218 <keypad_getkey+0xb2>
 1f4:	82 b1       	in	r24, 0x02	; 2
 1f6:	98 2a       	or	r9, r24
 1f8:	92 b8       	out	0x02, r9	; 2
 1fa:	cc 0c       	add	r12, r12
 1fc:	dd 1c       	adc	r13, r13
 1fe:	cc 0c       	add	r12, r12
 200:	dd 1c       	adc	r13, r13
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	8c 0f       	add	r24, r28
 208:	9d 1f       	adc	r25, r29
 20a:	c8 0e       	add	r12, r24
 20c:	d9 1e       	adc	r13, r25
 20e:	f6 01       	movw	r30, r12
 210:	ee 0d       	add	r30, r14
 212:	ff 1d       	adc	r31, r15
 214:	80 81       	ld	r24, Z
 216:	0d c0       	rjmp	.+26     	; 0x232 <keypad_getkey+0xcc>
 218:	1f 5f       	subi	r17, 0xFF	; 255
 21a:	14 30       	cpi	r17, 0x04	; 4
 21c:	c0 f2       	brcs	.-80     	; 0x1ce <keypad_getkey+0x68>
 21e:	82 b1       	in	r24, 0x02	; 2
 220:	08 2f       	mov	r16, r24
 222:	06 29       	or	r16, r6
 224:	02 b9       	out	0x02, r16	; 2
 226:	a3 94       	inc	r10
 228:	93 e0       	ldi	r25, 0x03	; 3
 22a:	9a 15       	cp	r25, r10
 22c:	08 f0       	brcs	.+2      	; 0x230 <keypad_getkey+0xca>
 22e:	ba cf       	rjmp	.-140    	; 0x1a4 <keypad_getkey+0x3e>
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	60 96       	adiw	r28, 0x10	; 16
 234:	0f b6       	in	r0, 0x3f	; 63
 236:	f8 94       	cli
 238:	de bf       	out	0x3e, r29	; 62
 23a:	0f be       	out	0x3f, r0	; 63
 23c:	cd bf       	out	0x3d, r28	; 61
 23e:	df 91       	pop	r29
 240:	cf 91       	pop	r28
 242:	1f 91       	pop	r17
 244:	0f 91       	pop	r16
 246:	ff 90       	pop	r15
 248:	ef 90       	pop	r14
 24a:	df 90       	pop	r13
 24c:	cf 90       	pop	r12
 24e:	af 90       	pop	r10
 250:	9f 90       	pop	r9
 252:	7f 90       	pop	r7
 254:	6f 90       	pop	r6
 256:	08 95       	ret

Disassembly of section .text.libgcc.div:

00000442 <__udivmodsi4>:
 442:	a1 e2       	ldi	r26, 0x21	; 33
 444:	1a 2e       	mov	r1, r26
 446:	aa 1b       	sub	r26, r26
 448:	bb 1b       	sub	r27, r27
 44a:	fd 01       	movw	r30, r26
 44c:	0d c0       	rjmp	.+26     	; 0x468 <__udivmodsi4_ep>

0000044e <__udivmodsi4_loop>:
 44e:	aa 1f       	adc	r26, r26
 450:	bb 1f       	adc	r27, r27
 452:	ee 1f       	adc	r30, r30
 454:	ff 1f       	adc	r31, r31
 456:	a2 17       	cp	r26, r18
 458:	b3 07       	cpc	r27, r19
 45a:	e4 07       	cpc	r30, r20
 45c:	f5 07       	cpc	r31, r21
 45e:	20 f0       	brcs	.+8      	; 0x468 <__udivmodsi4_ep>
 460:	a2 1b       	sub	r26, r18
 462:	b3 0b       	sbc	r27, r19
 464:	e4 0b       	sbc	r30, r20
 466:	f5 0b       	sbc	r31, r21

00000468 <__udivmodsi4_ep>:
 468:	66 1f       	adc	r22, r22
 46a:	77 1f       	adc	r23, r23
 46c:	88 1f       	adc	r24, r24
 46e:	99 1f       	adc	r25, r25
 470:	1a 94       	dec	r1
 472:	69 f7       	brne	.-38     	; 0x44e <__udivmodsi4_loop>
 474:	60 95       	com	r22
 476:	70 95       	com	r23
 478:	80 95       	com	r24
 47a:	90 95       	com	r25
 47c:	9b 01       	movw	r18, r22
 47e:	ac 01       	movw	r20, r24
 480:	bd 01       	movw	r22, r26
 482:	cf 01       	movw	r24, r30
 484:	08 95       	ret

Disassembly of section .text.libgcc:

0000059c <__xload_1>:
 59c:	57 fd       	sbrc	r21, 7
 59e:	03 c0       	rjmp	.+6      	; 0x5a6 <__xload_1+0xa>
 5a0:	5b bf       	out	0x3b, r21	; 59
 5a2:	67 91       	elpm	r22, Z+
 5a4:	08 95       	ret
 5a6:	60 81       	ld	r22, Z
 5a8:	08 95       	ret

Disassembly of section .text.__dummy_fini:

000005b2 <_fini>:
 5b2:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000005b4 <__funcs_on_exit>:
 5b4:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000005b6 <__simulator_exit>:
 5b6:	08 95       	ret

Disassembly of section .text.exit:

00000564 <exit>:
 564:	ec 01       	movw	r28, r24
 566:	0e 94 da 02 	call	0x5b4	; 0x5b4 <__funcs_on_exit>
 56a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <_fini>
 56e:	ce 01       	movw	r24, r28
 570:	0e 94 db 02 	call	0x5b6	; 0x5b6 <__simulator_exit>
 574:	ce 01       	movw	r24, r28
 576:	0e 94 d7 02 	call	0x5ae	; 0x5ae <_Exit>

Disassembly of section .text._Exit:

000005ae <_Exit>:
 5ae:	0e 94 a2 00 	call	0x144	; 0x144 <_exit>
