
microprocessadores-t1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000360  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000140  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005b  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 00000038  00000000  00000000  000003bb  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  000003f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001721  00000000  00000000  0000049b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d20  00000000  00000000  00001bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005f7  00000000  00000000  000028dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000120  00000000  00000000  00002ed4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000040e  00000000  00000000  00002ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000196  00000000  00000000  00003402  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00003598  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000002de  000002de  00000352  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003610  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.__vector_20 00000034  000001d8  000001d8  0000024c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    0000000c  000002d2  000002d2  00000346  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.delay_ms 00000028  00000266  00000266  000002da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.write_data_LCD 0000004c  00000140  00000140  000001b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.write_command_LCD 0000004c  0000018c  0000018c  00000200  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.clear_display 00000010  000002c2  000002c2  00000336  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.init_LCD 0000002c  0000023a  0000023a  000002ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.timer0_delay_us 0000002e  0000020c  0000020c  00000280  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.libgcc.mul 0000001e  0000028e  0000028e  00000302  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.__dummy_fini 00000002  000002e6  000002e6  0000035a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.__dummy_funcs_on_exit 00000002  000002e8  000002e8  0000035c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.__dummy_simulator_exit 00000002  000002ea  000002ea  0000035e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.exit    00000016  000002ac  000002ac  00000320  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text._Exit   00000004  000002e2  000002e2  00000356  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
   8:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
   c:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
  10:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
  14:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
  18:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
  1c:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
  20:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
  24:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
  28:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
  2c:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
  30:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
  34:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
  38:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
  3c:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
  40:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
  44:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
  48:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
  4c:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
  50:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__vector_20>
  54:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
  58:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
  5c:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
  60:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
  64:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
  68:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
  6c:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
  70:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
  74:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
  78:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
  7c:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
  80:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
  84:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
  88:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
  8c:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
  90:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
  94:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
  98:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
  9c:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
  a0:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
  a4:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
  a8:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
  ac:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
  b0:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
  b4:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
  b8:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
  bc:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
  c0:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
  c4:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
  c8:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
  cc:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
  d0:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
  d4:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
  d8:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
  dc:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>
  e0:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	e4 ee       	ldi	r30, 0xE4	; 228
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	40 e0       	ldi	r20, 0x00	; 0
  fa:	19 c0       	rjmp	.+50     	; 0x12e <__do_clear_bss+0x8>
  fc:	b7 91       	elpm	r27, Z+
  fe:	a7 91       	elpm	r26, Z+
 100:	37 91       	elpm	r19, Z+
 102:	27 91       	elpm	r18, Z+
 104:	07 91       	elpm	r16, Z+
 106:	07 fd       	sbrc	r16, 7
 108:	0e c0       	rjmp	.+28     	; 0x126 <__do_clear_bss>
 10a:	97 91       	elpm	r25, Z+
 10c:	87 91       	elpm	r24, Z+
 10e:	ef 01       	movw	r28, r30
 110:	f9 2f       	mov	r31, r25
 112:	e8 2f       	mov	r30, r24
 114:	0b bf       	out	0x3b, r16	; 59
 116:	07 90       	elpm	r0, Z+
 118:	0d 92       	st	X+, r0
 11a:	a2 17       	cp	r26, r18
 11c:	b3 07       	cpc	r27, r19
 11e:	d9 f7       	brne	.-10     	; 0x116 <__do_copy_data+0x22>
 120:	fe 01       	movw	r30, r28
 122:	1b be       	out	0x3b, r1	; 59
 124:	04 c0       	rjmp	.+8      	; 0x12e <__do_clear_bss+0x8>

00000126 <__do_clear_bss>:
 126:	1d 92       	st	X+, r1
 128:	a2 17       	cp	r26, r18
 12a:	b3 07       	cpc	r27, r19
 12c:	e1 f7       	brne	.-8      	; 0x126 <__do_clear_bss>
 12e:	e4 3e       	cpi	r30, 0xE4	; 228
 130:	f4 07       	cpc	r31, r20
 132:	21 f7       	brne	.-56     	; 0xfc <__do_copy_data+0x8>
 134:	0e 94 69 01 	call	0x2d2	; 0x2d2 <main>
 138:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <exit>

0000013c <_exit>:
 13c:	f8 94       	cli

0000013e <__stop_program>:
 13e:	ff cf       	rjmp	.-2      	; 0x13e <__stop_program>

Disassembly of section .text:

000002de <__bad_interrupt>:
 2de:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.__vector_20:

000001d8 <__vector_20>:
// Author: Gabriel Rosado dos Santos Mendes - 00301564

#include "main_header.h"

// Interrupt Timer 1	-	16bits
ISR(TIMER1_OVF_vect){
 1d8:	1f 92       	push	r1
 1da:	0f 92       	push	r0
 1dc:	0f b6       	in	r0, 0x3f	; 63
 1de:	0f 92       	push	r0
 1e0:	11 24       	eor	r1, r1
 1e2:	8f 93       	push	r24
 1e4:	9f 93       	push	r25
	TCNT1 = 52202;	//600
 1e6:	8a ee       	ldi	r24, 0xEA	; 234
 1e8:	9b ec       	ldi	r25, 0xCB	; 203
 1ea:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 1ee:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
	PORTB ^= (1<<PORTB5);
 1f2:	95 b1       	in	r25, 0x05	; 5
 1f4:	80 e2       	ldi	r24, 0x20	; 32
 1f6:	89 27       	eor	r24, r25
 1f8:	85 b9       	out	0x05, r24	; 5
	TIFR1 = (1<<0);
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	86 bb       	out	0x16, r24	; 22
}
 1fe:	9f 91       	pop	r25
 200:	8f 91       	pop	r24
 202:	0f 90       	pop	r0
 204:	0f be       	out	0x3f, r0	; 63
 206:	0f 90       	pop	r0
 208:	1f 90       	pop	r1
 20a:	18 95       	reti

Disassembly of section .text.main:

000002d2 <main>:
int main(void){

    //uart_init();	// Inicializar UART
    //sei();			// Ativa interrupt
    
	init_LCD();
 2d2:	0e 94 1d 01 	call	0x23a	; 0x23a <init_LCD>
	write_data_LCD('a');
 2d6:	81 e6       	ldi	r24, 0x61	; 97
 2d8:	0e 94 a0 00 	call	0x140	; 0x140 <__data_load_end>
 2dc:	ff cf       	rjmp	.-2      	; 0x2dc <main+0xa>

Disassembly of section .text.delay_ms:

00000266 <delay_ms>:

	unsigned char c;
	for (c = 0; text[c] != '\0'; c++) {
		write_data_LCD(text[c]);
	}
}
 266:	9c 01       	movw	r18, r24
 268:	36 95       	lsr	r19
 26a:	27 95       	ror	r18
 26c:	36 95       	lsr	r19
 26e:	27 95       	ror	r18
 270:	36 95       	lsr	r19
 272:	27 95       	ror	r18
 274:	a5 ec       	ldi	r26, 0xC5	; 197
 276:	b0 e2       	ldi	r27, 0x20	; 32
 278:	0e 94 47 01 	call	0x28e	; 0x28e <__umulhisi3>
 27c:	92 95       	swap	r25
 27e:	82 95       	swap	r24
 280:	8f 70       	andi	r24, 0x0F	; 15
 282:	89 27       	eor	r24, r25
 284:	9f 70       	andi	r25, 0x0F	; 15
 286:	89 27       	eor	r24, r25
 288:	0e 94 06 01 	call	0x20c	; 0x20c <timer0_delay_us>
 28c:	08 95       	ret

Disassembly of section .text.write_data_LCD:

00000140 <write_data_LCD>:
 140:	95 b1       	in	r25, 0x05	; 5
 142:	91 60       	ori	r25, 0x01	; 1
 144:	95 b9       	out	0x05, r25	; 5
 146:	95 b1       	in	r25, 0x05	; 5
 148:	9f 70       	andi	r25, 0x0F	; 15
 14a:	95 b9       	out	0x05, r25	; 5
 14c:	95 b1       	in	r25, 0x05	; 5
 14e:	28 2f       	mov	r18, r24
 150:	20 7f       	andi	r18, 0xF0	; 240
 152:	92 2b       	or	r25, r18
 154:	95 b9       	out	0x05, r25	; 5
 156:	95 b1       	in	r25, 0x05	; 5
 158:	92 60       	ori	r25, 0x02	; 2
 15a:	95 b9       	out	0x05, r25	; 5
 15c:	95 b1       	in	r25, 0x05	; 5
 15e:	9d 7f       	andi	r25, 0xFD	; 253
 160:	95 b9       	out	0x05, r25	; 5
 162:	95 b1       	in	r25, 0x05	; 5
 164:	9f 70       	andi	r25, 0x0F	; 15
 166:	95 b9       	out	0x05, r25	; 5
 168:	25 b1       	in	r18, 0x05	; 5
 16a:	30 e1       	ldi	r19, 0x10	; 16
 16c:	83 9f       	mul	r24, r19
 16e:	c0 01       	movw	r24, r0
 170:	11 24       	eor	r1, r1
 172:	82 2b       	or	r24, r18
 174:	85 b9       	out	0x05, r24	; 5
 176:	85 b1       	in	r24, 0x05	; 5
 178:	82 60       	ori	r24, 0x02	; 2
 17a:	85 b9       	out	0x05, r24	; 5
 17c:	85 b1       	in	r24, 0x05	; 5
 17e:	8d 7f       	andi	r24, 0xFD	; 253
 180:	85 b9       	out	0x05, r24	; 5
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	0e 94 33 01 	call	0x266	; 0x266 <delay_ms>
 18a:	08 95       	ret

Disassembly of section .text.write_command_LCD:

0000018c <write_command_LCD>:
 18c:	95 b1       	in	r25, 0x05	; 5
 18e:	9e 7f       	andi	r25, 0xFE	; 254
 190:	95 b9       	out	0x05, r25	; 5
 192:	95 b1       	in	r25, 0x05	; 5
 194:	9f 70       	andi	r25, 0x0F	; 15
 196:	95 b9       	out	0x05, r25	; 5
 198:	95 b1       	in	r25, 0x05	; 5
 19a:	28 2f       	mov	r18, r24
 19c:	20 7f       	andi	r18, 0xF0	; 240
 19e:	92 2b       	or	r25, r18
 1a0:	95 b9       	out	0x05, r25	; 5
 1a2:	95 b1       	in	r25, 0x05	; 5
 1a4:	92 60       	ori	r25, 0x02	; 2
 1a6:	95 b9       	out	0x05, r25	; 5
 1a8:	95 b1       	in	r25, 0x05	; 5
 1aa:	9d 7f       	andi	r25, 0xFD	; 253
 1ac:	95 b9       	out	0x05, r25	; 5
 1ae:	95 b1       	in	r25, 0x05	; 5
 1b0:	9f 70       	andi	r25, 0x0F	; 15
 1b2:	95 b9       	out	0x05, r25	; 5
 1b4:	25 b1       	in	r18, 0x05	; 5
 1b6:	30 e1       	ldi	r19, 0x10	; 16
 1b8:	83 9f       	mul	r24, r19
 1ba:	c0 01       	movw	r24, r0
 1bc:	11 24       	eor	r1, r1
 1be:	82 2b       	or	r24, r18
 1c0:	85 b9       	out	0x05, r24	; 5
 1c2:	85 b1       	in	r24, 0x05	; 5
 1c4:	82 60       	ori	r24, 0x02	; 2
 1c6:	85 b9       	out	0x05, r24	; 5
 1c8:	85 b1       	in	r24, 0x05	; 5
 1ca:	8d 7f       	andi	r24, 0xFD	; 253
 1cc:	85 b9       	out	0x05, r24	; 5
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 33 01 	call	0x266	; 0x266 <delay_ms>
 1d6:	08 95       	ret

Disassembly of section .text.clear_display:

000002c2 <clear_display>:

	delay_ms(1); // Adjust timing as needed
}

void clear_display(void) {
	write_command_LCD(0x01); // Clear display
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	0e 94 c6 00 	call	0x18c	; 0x18c <write_command_LCD>
	delay_ms(2); // Wait for command to complete
 2c8:	82 e0       	ldi	r24, 0x02	; 2
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	0e 94 33 01 	call	0x266	; 0x266 <delay_ms>
 2d0:	08 95       	ret

Disassembly of section .text.init_LCD:

0000023a <init_LCD>:

	unsigned char c;
	for (c = 0; text[c] != '\0'; c++) {
		write_data_LCD(text[c]);
	}
}
 23a:	84 b1       	in	r24, 0x04	; 4
 23c:	83 6f       	ori	r24, 0xF3	; 243
 23e:	84 b9       	out	0x04, r24	; 4
 240:	8f e0       	ldi	r24, 0x0F	; 15
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	0e 94 33 01 	call	0x266	; 0x266 <delay_ms>
 248:	82 e0       	ldi	r24, 0x02	; 2
 24a:	0e 94 c6 00 	call	0x18c	; 0x18c <write_command_LCD>
 24e:	88 e2       	ldi	r24, 0x28	; 40
 250:	0e 94 c6 00 	call	0x18c	; 0x18c <write_command_LCD>
 254:	8c e0       	ldi	r24, 0x0C	; 12
 256:	0e 94 c6 00 	call	0x18c	; 0x18c <write_command_LCD>
 25a:	86 e0       	ldi	r24, 0x06	; 6
 25c:	0e 94 c6 00 	call	0x18c	; 0x18c <write_command_LCD>
 260:	0e 94 61 01 	call	0x2c2	; 0x2c2 <clear_display>
 264:	08 95       	ret

Disassembly of section .text.timer0_delay_us:

0000020c <timer0_delay_us>:
}


void timer0_delay_us(unsigned int microseconds) {
	// Calculate the number of timer ticks needed for the given microseconds
	unsigned int timer_ticks = (microseconds * (F_CPU / 1000000UL)) / 8;
 20c:	a0 e0       	ldi	r26, 0x00	; 0
 20e:	b0 e0       	ldi	r27, 0x00	; 0
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	aa 1f       	adc	r26, r26
 216:	bb 1f       	adc	r27, r27
	
	// Ensure timer ticks fit within an 8-bit register (TCNT0 is 8-bit)
	if (timer_ticks > 255) {
 218:	8f 3f       	cpi	r24, 0xFF	; 255
 21a:	91 05       	cpc	r25, r1
 21c:	19 f0       	breq	.+6      	; 0x224 <timer0_delay_us+0x18>
 21e:	10 f0       	brcs	.+4      	; 0x224 <timer0_delay_us+0x18>
		timer_ticks = 255; // Cap the maximum delay to 255 microseconds
 220:	8f ef       	ldi	r24, 0xFF	; 255
 222:	90 e0       	ldi	r25, 0x00	; 0
	}	

	TCCR0A = 0;					// Configures Timer 0 in normal mode
 224:	14 bc       	out	0x24, r1	; 36
	TCCR0B = (1 << CS01);		// Configures Timer 0 in normal mode
 226:	92 e0       	ldi	r25, 0x02	; 2
 228:	95 bd       	out	0x25, r25	; 37
	TCNT0 = 256 - timer_ticks;	// Sets the initial timer count based on the calculated timer ticks
 22a:	81 95       	neg	r24
 22c:	86 bd       	out	0x26, r24	; 38

	while ((TIFR0 & (1 << TOV0)) == 0); // Wait for overflow flag
 22e:	a8 9b       	sbis	0x15, 0	; 21
 230:	fe cf       	rjmp	.-4      	; 0x22e <timer0_delay_us+0x22>

	TIFR0 = (1 << TOV0);     // CClears the overflow flag
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	85 bb       	out	0x15, r24	; 21
	TCCR0B = 0;              // Stops Timer 0 after the delay
 236:	15 bc       	out	0x25, r1	; 37
 238:	08 95       	ret

Disassembly of section .text.libgcc.mul:

0000028e <__umulhisi3>:
 28e:	a2 9f       	mul	r26, r18
 290:	b0 01       	movw	r22, r0
 292:	b3 9f       	mul	r27, r19
 294:	c0 01       	movw	r24, r0
 296:	a3 9f       	mul	r26, r19
 298:	70 0d       	add	r23, r0
 29a:	81 1d       	adc	r24, r1
 29c:	11 24       	eor	r1, r1
 29e:	91 1d       	adc	r25, r1
 2a0:	b2 9f       	mul	r27, r18
 2a2:	70 0d       	add	r23, r0
 2a4:	81 1d       	adc	r24, r1
 2a6:	11 24       	eor	r1, r1
 2a8:	91 1d       	adc	r25, r1
 2aa:	08 95       	ret

Disassembly of section .text.__dummy_fini:

000002e6 <_fini>:
 2e6:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000002e8 <__funcs_on_exit>:
 2e8:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000002ea <__simulator_exit>:
 2ea:	08 95       	ret

Disassembly of section .text.exit:

000002ac <exit>:
 2ac:	ec 01       	movw	r28, r24
 2ae:	0e 94 74 01 	call	0x2e8	; 0x2e8 <__funcs_on_exit>
 2b2:	0e 94 73 01 	call	0x2e6	; 0x2e6 <_fini>
 2b6:	ce 01       	movw	r24, r28
 2b8:	0e 94 75 01 	call	0x2ea	; 0x2ea <__simulator_exit>
 2bc:	ce 01       	movw	r24, r28
 2be:	0e 94 71 01 	call	0x2e2	; 0x2e2 <_Exit>

Disassembly of section .text._Exit:

000002e2 <_Exit>:
 2e2:	0e 94 9e 00 	call	0x13c	; 0x13c <_exit>
