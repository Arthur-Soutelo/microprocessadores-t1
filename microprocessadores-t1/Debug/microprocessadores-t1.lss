
microprocessadores-t1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000438  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000140  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000001c  00000000  00000000  00000467  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000483  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001546  00000000  00000000  000004f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000cb5  00000000  00000000  00001a39  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000529  00000000  00000000  000026ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ec  00000000  00000000  00002c18  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000413  00000000  00000000  00002d04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000215  00000000  00000000  00003117  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000332c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000396  00000396  0000042a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000337c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.__vector_20 00000034  00000300  00000300  00000394  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .progmemx.data 00000009  00000140  00000140  000001d4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 16 .text.main    0000005a  0000026a  0000026a  000002fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.delay_ms 00000020  00000334  00000334  000003c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.write_data_LCD 00000062  0000014a  0000014a  000001de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.write_command_LCD 00000062  000001ac  000001ac  00000240  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.write_string 0000003c  000002c4  000002c4  00000358  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.clear_display 00000010  00000386  00000386  0000041a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.init_LCD 0000005c  0000020e  0000020e  000002a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.libgcc  0000001c  00000354  00000354  000003e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.__dummy_fini 00000002  0000039e  0000039e  00000432  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.__dummy_funcs_on_exit 00000002  000003a0  000003a0  00000434  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.__dummy_simulator_exit 00000002  000003a2  000003a2  00000436  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.exit    00000016  00000370  00000370  00000404  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text._Exit   00000004  0000039a  0000039a  0000042e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
   8:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
   c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  10:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  14:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  18:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  1c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  20:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  24:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  28:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  2c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  30:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  34:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  38:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  3c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  40:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  44:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  48:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  4c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  50:	0c 94 80 01 	jmp	0x300	; 0x300 <__vector_20>
  54:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  58:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  5c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  60:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  64:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  68:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  6c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  70:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  74:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  78:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  7c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  80:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  84:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  88:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  8c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  90:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  94:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  98:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  9c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  a0:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  a4:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  a8:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  ac:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  b0:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  b4:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  b8:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  bc:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  c0:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  c4:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  c8:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  cc:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  d0:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  d4:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  d8:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  dc:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>
  e0:	0c 94 cb 01 	jmp	0x396	; 0x396 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	e4 ee       	ldi	r30, 0xE4	; 228
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	40 e0       	ldi	r20, 0x00	; 0
  fa:	19 c0       	rjmp	.+50     	; 0x12e <__do_clear_bss+0x8>
  fc:	b7 91       	elpm	r27, Z+
  fe:	a7 91       	elpm	r26, Z+
 100:	37 91       	elpm	r19, Z+
 102:	27 91       	elpm	r18, Z+
 104:	07 91       	elpm	r16, Z+
 106:	07 fd       	sbrc	r16, 7
 108:	0e c0       	rjmp	.+28     	; 0x126 <__do_clear_bss>
 10a:	97 91       	elpm	r25, Z+
 10c:	87 91       	elpm	r24, Z+
 10e:	ef 01       	movw	r28, r30
 110:	f9 2f       	mov	r31, r25
 112:	e8 2f       	mov	r30, r24
 114:	0b bf       	out	0x3b, r16	; 59
 116:	07 90       	elpm	r0, Z+
 118:	0d 92       	st	X+, r0
 11a:	a2 17       	cp	r26, r18
 11c:	b3 07       	cpc	r27, r19
 11e:	d9 f7       	brne	.-10     	; 0x116 <__do_copy_data+0x22>
 120:	fe 01       	movw	r30, r28
 122:	1b be       	out	0x3b, r1	; 59
 124:	04 c0       	rjmp	.+8      	; 0x12e <__do_clear_bss+0x8>

00000126 <__do_clear_bss>:
 126:	1d 92       	st	X+, r1
 128:	a2 17       	cp	r26, r18
 12a:	b3 07       	cpc	r27, r19
 12c:	e1 f7       	brne	.-8      	; 0x126 <__do_clear_bss>
 12e:	e4 3e       	cpi	r30, 0xE4	; 228
 130:	f4 07       	cpc	r31, r20
 132:	21 f7       	brne	.-56     	; 0xfc <__do_copy_data+0x8>
 134:	0e 94 35 01 	call	0x26a	; 0x26a <main>
 138:	0c 94 b8 01 	jmp	0x370	; 0x370 <exit>

0000013c <_exit>:
 13c:	f8 94       	cli

0000013e <__stop_program>:
 13e:	ff cf       	rjmp	.-2      	; 0x13e <__stop_program>

Disassembly of section .text:

00000396 <__bad_interrupt>:
 396:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.__vector_20:

00000300 <__vector_20>:
// Author: Gabriel Rosado dos Santos Mendes - 00301564

#include "main_header.h"

// Interrupt Timer 1	-	16bits
ISR(TIMER1_OVF_vect){
 300:	1f 92       	push	r1
 302:	0f 92       	push	r0
 304:	0f b6       	in	r0, 0x3f	; 63
 306:	0f 92       	push	r0
 308:	11 24       	eor	r1, r1
 30a:	8f 93       	push	r24
 30c:	9f 93       	push	r25
	TCNT1 = 52202;	//600
 30e:	8a ee       	ldi	r24, 0xEA	; 234
 310:	9b ec       	ldi	r25, 0xCB	; 203
 312:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 316:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
	PORTB ^= (1<<PORTB5);
 31a:	95 b1       	in	r25, 0x05	; 5
 31c:	80 e2       	ldi	r24, 0x20	; 32
 31e:	89 27       	eor	r24, r25
 320:	85 b9       	out	0x05, r24	; 5
	TIFR1 = (1<<0);
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	86 bb       	out	0x16, r24	; 22
}
 326:	9f 91       	pop	r25
 328:	8f 91       	pop	r24
 32a:	0f 90       	pop	r0
 32c:	0f be       	out	0x3f, r0	; 63
 32e:	0f 90       	pop	r0
 330:	1f 90       	pop	r1
 332:	18 95       	reti

Disassembly of section .text.main:

0000026a <main>:

int main(void){
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
 26e:	cd b7       	in	r28, 0x3d	; 61
 270:	de b7       	in	r29, 0x3e	; 62
 272:	29 97       	sbiw	r28, 0x09	; 9
 274:	0f b6       	in	r0, 0x3f	; 63
 276:	f8 94       	cli
 278:	de bf       	out	0x3e, r29	; 62
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	cd bf       	out	0x3d, r28	; 61

    //uart_init();	// Inicializar UART
    //sei();			// Ativa interrupt
    
	init_LCD();
 27e:	0e 94 07 01 	call	0x20e	; 0x20e <init_LCD>
	//write_data_LCD('a');
	//clear_display();
	//write_command_LCD(0x80); // Set cursor to start of line 1
	//write_data_LCD('a');
	
	char message[] = "LCD Test";
 282:	20 e4       	ldi	r18, 0x40	; 64
 284:	31 e0       	ldi	r19, 0x01	; 1
 286:	40 e0       	ldi	r20, 0x00	; 0
 288:	89 e0       	ldi	r24, 0x09	; 9
 28a:	f9 01       	movw	r30, r18
 28c:	de 01       	movw	r26, r28
 28e:	11 96       	adiw	r26, 0x01	; 1
 290:	74 2f       	mov	r23, r20
 292:	0e 94 aa 01 	call	0x354	; 0x354 <__movmemx_qi>
	write_string(1,message);
 296:	be 01       	movw	r22, r28
 298:	6f 5f       	subi	r22, 0xFF	; 255
 29a:	7f 4f       	sbci	r23, 0xFF	; 255
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	0e 94 62 01 	call	0x2c4	; 0x2c4 <write_string>
	delay_ms(1000);
 2a2:	88 ee       	ldi	r24, 0xE8	; 232
 2a4:	93 e0       	ldi	r25, 0x03	; 3
 2a6:	0e 94 9a 01 	call	0x334	; 0x334 <delay_ms>
	write_string(2,message);
 2aa:	be 01       	movw	r22, r28
 2ac:	6f 5f       	subi	r22, 0xFF	; 255
 2ae:	7f 4f       	sbci	r23, 0xFF	; 255
 2b0:	82 e0       	ldi	r24, 0x02	; 2
 2b2:	0e 94 62 01 	call	0x2c4	; 0x2c4 <write_string>
	delay_ms(1000);
 2b6:	88 ee       	ldi	r24, 0xE8	; 232
 2b8:	93 e0       	ldi	r25, 0x03	; 3
 2ba:	0e 94 9a 01 	call	0x334	; 0x334 <delay_ms>
	
	clear_display();
 2be:	0e 94 c3 01 	call	0x386	; 0x386 <clear_display>
 2c2:	ff cf       	rjmp	.-2      	; 0x2c2 <main+0x58>

Disassembly of section .text.delay_ms:

00000334 <delay_ms>:
		write_data_LCD(text[c]);
		//write_command_LCD(0x06);	// Entry mode set
	}
}

void delay_ms(unsigned int ms) {
 334:	fc 01       	movw	r30, r24
	unsigned char c;
	for (c=0; c<40*ms; c++);
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	01 c0       	rjmp	.+2      	; 0x33c <delay_ms+0x8>
 33a:	9f 5f       	subi	r25, 0xFF	; 255
 33c:	29 2f       	mov	r18, r25
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	68 e2       	ldi	r22, 0x28	; 40
 342:	6e 9f       	mul	r22, r30
 344:	a0 01       	movw	r20, r0
 346:	6f 9f       	mul	r22, r31
 348:	50 0d       	add	r21, r0
 34a:	11 24       	eor	r1, r1
 34c:	24 17       	cp	r18, r20
 34e:	35 07       	cpc	r19, r21
 350:	a0 f3       	brcs	.-24     	; 0x33a <delay_ms+0x6>
	//timer0_delay_us(ms*1000);
}
 352:	08 95       	ret

Disassembly of section .text.write_data_LCD:

0000014a <write_data_LCD>:
	write_command_LCD(0x06);	// Entry mode set: increment cursor, no display shift
	clear_display();
	write_command_LCD(0x80); // Set cursor to start of line 1
}

void write_data_LCD(char data) {
 14a:	cf 93       	push	r28
 14c:	c8 2f       	mov	r28, r24
	// Set RS to 1 for data mode
	LCD_PORT |= (1 << RS_PIN);
 14e:	85 b1       	in	r24, 0x05	; 5
 150:	81 60       	ori	r24, 0x01	; 1
 152:	85 b9       	out	0x05, r24	; 5

	// Write high nibble
	LCD_PORT &= 0x0F;
 154:	85 b1       	in	r24, 0x05	; 5
 156:	8f 70       	andi	r24, 0x0F	; 15
 158:	85 b9       	out	0x05, r24	; 5
	LCD_PORT |= (data & 0xF0);
 15a:	85 b1       	in	r24, 0x05	; 5
 15c:	9c 2f       	mov	r25, r28
 15e:	90 7f       	andi	r25, 0xF0	; 240
 160:	89 2b       	or	r24, r25
 162:	85 b9       	out	0x05, r24	; 5
	LCD_PORT |= (1 << E_PIN);
 164:	85 b1       	in	r24, 0x05	; 5
 166:	82 60       	ori	r24, 0x02	; 2
 168:	85 b9       	out	0x05, r24	; 5
	delay_ms(1);
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 9a 01 	call	0x334	; 0x334 <delay_ms>
	LCD_PORT &= ~(1 << E_PIN);
 172:	85 b1       	in	r24, 0x05	; 5
 174:	8d 7f       	andi	r24, 0xFD	; 253
 176:	85 b9       	out	0x05, r24	; 5

	// Write low nibble
	LCD_PORT &= 0x0F;
 178:	85 b1       	in	r24, 0x05	; 5
 17a:	8f 70       	andi	r24, 0x0F	; 15
 17c:	85 b9       	out	0x05, r24	; 5
	LCD_PORT |= (data << 4);
 17e:	25 b1       	in	r18, 0x05	; 5
 180:	30 e1       	ldi	r19, 0x10	; 16
 182:	c3 9f       	mul	r28, r19
 184:	c0 01       	movw	r24, r0
 186:	11 24       	eor	r1, r1
 188:	82 2b       	or	r24, r18
 18a:	85 b9       	out	0x05, r24	; 5
	LCD_PORT |= (1 << E_PIN);
 18c:	85 b1       	in	r24, 0x05	; 5
 18e:	82 60       	ori	r24, 0x02	; 2
 190:	85 b9       	out	0x05, r24	; 5
	delay_ms(1);
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 9a 01 	call	0x334	; 0x334 <delay_ms>
	LCD_PORT &= ~(1 << E_PIN);
 19a:	85 b1       	in	r24, 0x05	; 5
 19c:	8d 7f       	andi	r24, 0xFD	; 253
 19e:	85 b9       	out	0x05, r24	; 5

	delay_ms(2); // Adjust timing as needed
 1a0:	82 e0       	ldi	r24, 0x02	; 2
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	0e 94 9a 01 	call	0x334	; 0x334 <delay_ms>
}
 1a8:	cf 91       	pop	r28
 1aa:	08 95       	ret

Disassembly of section .text.write_command_LCD:

000001ac <write_command_LCD>:

void write_command_LCD(char command) {
 1ac:	cf 93       	push	r28
 1ae:	c8 2f       	mov	r28, r24
	// Set RS to 0 for command mode
	LCD_PORT &= ~(1 << RS_PIN);
 1b0:	85 b1       	in	r24, 0x05	; 5
 1b2:	8e 7f       	andi	r24, 0xFE	; 254
 1b4:	85 b9       	out	0x05, r24	; 5

	// Write high nibble
	LCD_PORT &= 0x0F;
 1b6:	85 b1       	in	r24, 0x05	; 5
 1b8:	8f 70       	andi	r24, 0x0F	; 15
 1ba:	85 b9       	out	0x05, r24	; 5
	LCD_PORT |= (command & 0xF0);
 1bc:	85 b1       	in	r24, 0x05	; 5
 1be:	9c 2f       	mov	r25, r28
 1c0:	90 7f       	andi	r25, 0xF0	; 240
 1c2:	89 2b       	or	r24, r25
 1c4:	85 b9       	out	0x05, r24	; 5
	LCD_PORT |= (1 << E_PIN);
 1c6:	85 b1       	in	r24, 0x05	; 5
 1c8:	82 60       	ori	r24, 0x02	; 2
 1ca:	85 b9       	out	0x05, r24	; 5
	delay_ms(1);
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 9a 01 	call	0x334	; 0x334 <delay_ms>
	LCD_PORT &= ~(1 << E_PIN);
 1d4:	85 b1       	in	r24, 0x05	; 5
 1d6:	8d 7f       	andi	r24, 0xFD	; 253
 1d8:	85 b9       	out	0x05, r24	; 5

	// Write low nibble
	LCD_PORT &= 0x0F;
 1da:	85 b1       	in	r24, 0x05	; 5
 1dc:	8f 70       	andi	r24, 0x0F	; 15
 1de:	85 b9       	out	0x05, r24	; 5
	LCD_PORT |= (command << 4);
 1e0:	25 b1       	in	r18, 0x05	; 5
 1e2:	30 e1       	ldi	r19, 0x10	; 16
 1e4:	c3 9f       	mul	r28, r19
 1e6:	c0 01       	movw	r24, r0
 1e8:	11 24       	eor	r1, r1
 1ea:	82 2b       	or	r24, r18
 1ec:	85 b9       	out	0x05, r24	; 5
	LCD_PORT |= (1 << E_PIN);
 1ee:	85 b1       	in	r24, 0x05	; 5
 1f0:	82 60       	ori	r24, 0x02	; 2
 1f2:	85 b9       	out	0x05, r24	; 5
	delay_ms(1);
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0e 94 9a 01 	call	0x334	; 0x334 <delay_ms>
	LCD_PORT &= ~(1 << E_PIN);
 1fc:	85 b1       	in	r24, 0x05	; 5
 1fe:	8d 7f       	andi	r24, 0xFD	; 253
 200:	85 b9       	out	0x05, r24	; 5

	delay_ms(2); // Adjust timing as needed
 202:	82 e0       	ldi	r24, 0x02	; 2
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	0e 94 9a 01 	call	0x334	; 0x334 <delay_ms>
}
 20a:	cf 91       	pop	r28
 20c:	08 95       	ret

Disassembly of section .text.write_string:

000002c4 <write_string>:
void clear_display(void) {
	write_command_LCD(0x01); // Clear display
	delay_ms(2); // Wait for command to complete
}

void write_string(char line, char *text) {
 2c4:	0f 93       	push	r16
 2c6:	1f 93       	push	r17
 2c8:	cf 93       	push	r28
 2ca:	8b 01       	movw	r16, r22
	if (line == 1)
 2cc:	81 30       	cpi	r24, 0x01	; 1
 2ce:	21 f4       	brne	.+8      	; 0x2d8 <write_string+0x14>
	write_command_LCD(0x80); // Set cursor to start of line 1
 2d0:	80 e8       	ldi	r24, 0x80	; 128
 2d2:	0e 94 d6 00 	call	0x1ac	; 0x1ac <write_command_LCD>
 2d6:	05 c0       	rjmp	.+10     	; 0x2e2 <write_string+0x1e>
	else if (line == 2)
 2d8:	82 30       	cpi	r24, 0x02	; 2
 2da:	19 f4       	brne	.+6      	; 0x2e2 <write_string+0x1e>
	write_command_LCD(0xC0); // Set cursor to start of line 2
 2dc:	80 ec       	ldi	r24, 0xC0	; 192
 2de:	0e 94 d6 00 	call	0x1ac	; 0x1ac <write_command_LCD>
void clear_display(void) {
	write_command_LCD(0x01); // Clear display
	delay_ms(2); // Wait for command to complete
}

void write_string(char line, char *text) {
 2e2:	c0 e0       	ldi	r28, 0x00	; 0
 2e4:	03 c0       	rjmp	.+6      	; 0x2ec <write_string+0x28>
	else if (line == 2)
	write_command_LCD(0xC0); // Set cursor to start of line 2

	unsigned char c;
	for (c = 0; text[c] != '\0'; c++) {
		write_data_LCD(text[c]);
 2e6:	0e 94 a5 00 	call	0x14a	; 0x14a <write_data_LCD>
	write_command_LCD(0x80); // Set cursor to start of line 1
	else if (line == 2)
	write_command_LCD(0xC0); // Set cursor to start of line 2

	unsigned char c;
	for (c = 0; text[c] != '\0'; c++) {
 2ea:	cf 5f       	subi	r28, 0xFF	; 255
 2ec:	f8 01       	movw	r30, r16
 2ee:	ec 0f       	add	r30, r28
 2f0:	f1 1d       	adc	r31, r1
 2f2:	80 81       	ld	r24, Z
 2f4:	81 11       	cpse	r24, r1
 2f6:	f7 cf       	rjmp	.-18     	; 0x2e6 <write_string+0x22>
		write_data_LCD(text[c]);
		//write_command_LCD(0x06);	// Entry mode set
	}
}
 2f8:	cf 91       	pop	r28
 2fa:	1f 91       	pop	r17
 2fc:	0f 91       	pop	r16
 2fe:	08 95       	ret

Disassembly of section .text.clear_display:

00000386 <clear_display>:

	delay_ms(2); // Adjust timing as needed
}

void clear_display(void) {
	write_command_LCD(0x01); // Clear display
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	0e 94 d6 00 	call	0x1ac	; 0x1ac <write_command_LCD>
	delay_ms(2); // Wait for command to complete
 38c:	82 e0       	ldi	r24, 0x02	; 2
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	0e 94 9a 01 	call	0x334	; 0x334 <delay_ms>
 394:	08 95       	ret

Disassembly of section .text.init_LCD:

0000020e <init_LCD>:
#include "lcd.h"
#include "timer.h"

// Set the data pins to output
void init_LCD(void) {
	LCD_DDR |= (1 << RS_PIN) | (1 << E_PIN) | (1 << D4_PIN) | (1 << D5_PIN) | (1 << D6_PIN) | (1 << D7_PIN);
 20e:	84 b1       	in	r24, 0x04	; 4
 210:	83 6f       	ori	r24, 0xF3	; 243
 212:	84 b9       	out	0x04, r24	; 4
	delay_ms(500);				// Wait for LCD to power up
 214:	84 ef       	ldi	r24, 0xF4	; 244
 216:	91 e0       	ldi	r25, 0x01	; 1
 218:	0e 94 9a 01 	call	0x334	; 0x334 <delay_ms>
	
	// Send function set command sequence to initialize the LCD
	write_command_LCD(0x03); // Function set: 8-bit mode
 21c:	83 e0       	ldi	r24, 0x03	; 3
 21e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <write_command_LCD>
	delay_ms(5);             // Wait
 222:	85 e0       	ldi	r24, 0x05	; 5
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 9a 01 	call	0x334	; 0x334 <delay_ms>
	write_command_LCD(0x03); // Function set: 8-bit mode (repeat)
 22a:	83 e0       	ldi	r24, 0x03	; 3
 22c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <write_command_LCD>
	delay_ms(1);             // Wait
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	0e 94 9a 01 	call	0x334	; 0x334 <delay_ms>
	write_command_LCD(0x03); // Function set: 8-bit mode (repeat)
 238:	83 e0       	ldi	r24, 0x03	; 3
 23a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <write_command_LCD>
	delay_ms(1);             // Wait
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	0e 94 9a 01 	call	0x334	; 0x334 <delay_ms>
	
	write_command_LCD(0x02);	// Initialize in 4-bit mode
 246:	82 e0       	ldi	r24, 0x02	; 2
 248:	0e 94 d6 00 	call	0x1ac	; 0x1ac <write_command_LCD>
	write_command_LCD(0x28);	// Function set: 4-bit/2-line
 24c:	88 e2       	ldi	r24, 0x28	; 40
 24e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <write_command_LCD>
	write_command_LCD(0x0C);	// Display on, cursor off
 252:	8c e0       	ldi	r24, 0x0C	; 12
 254:	0e 94 d6 00 	call	0x1ac	; 0x1ac <write_command_LCD>
	write_command_LCD(0x06);	// Entry mode set: increment cursor, no display shift
 258:	86 e0       	ldi	r24, 0x06	; 6
 25a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <write_command_LCD>
	clear_display();
 25e:	0e 94 c3 01 	call	0x386	; 0x386 <clear_display>
	write_command_LCD(0x80); // Set cursor to start of line 1
 262:	80 e8       	ldi	r24, 0x80	; 128
 264:	0e 94 d6 00 	call	0x1ac	; 0x1ac <write_command_LCD>
 268:	08 95       	ret

Disassembly of section .text.libgcc:

00000354 <__movmemx_qi>:
 354:	99 27       	eor	r25, r25

00000356 <__movmemx_hi>:
 356:	77 fd       	sbrc	r23, 7
 358:	06 c0       	rjmp	.+12     	; 0x366 <__movmemx_hi+0x10>
 35a:	7b bf       	out	0x3b, r23	; 59
 35c:	07 90       	elpm	r0, Z+
 35e:	0d 92       	st	X+, r0
 360:	01 97       	sbiw	r24, 0x01	; 1
 362:	e1 f7       	brne	.-8      	; 0x35c <__movmemx_hi+0x6>
 364:	08 95       	ret
 366:	01 90       	ld	r0, Z+
 368:	0d 92       	st	X+, r0
 36a:	01 97       	sbiw	r24, 0x01	; 1
 36c:	e1 f7       	brne	.-8      	; 0x366 <__movmemx_hi+0x10>
 36e:	08 95       	ret

Disassembly of section .text.__dummy_fini:

0000039e <_fini>:
 39e:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000003a0 <__funcs_on_exit>:
 3a0:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000003a2 <__simulator_exit>:
 3a2:	08 95       	ret

Disassembly of section .text.exit:

00000370 <exit>:
 370:	ec 01       	movw	r28, r24
 372:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <__funcs_on_exit>
 376:	0e 94 cf 01 	call	0x39e	; 0x39e <_fini>
 37a:	ce 01       	movw	r24, r28
 37c:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <__simulator_exit>
 380:	ce 01       	movw	r24, r28
 382:	0e 94 cd 01 	call	0x39a	; 0x39a <_Exit>

Disassembly of section .text._Exit:

0000039a <_Exit>:
 39a:	0e 94 9e 00 	call	0x13c	; 0x13c <_exit>
