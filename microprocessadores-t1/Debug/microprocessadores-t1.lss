
microprocessadores-t1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00000800  00000894  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000148  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000894  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000002a  00000000  00000000  000008c3  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001c8  00000000  00000000  000008ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003201  00000000  00000000  00000ab5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000142d  00000000  00000000  00003cb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ffb  00000000  00000000  000050e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000414  00000000  00000000  000060e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000523  00000000  00000000  000064f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000eda  00000000  00000000  00006a17  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000168  00000000  00000000  000078f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000007e2  000007e2  00000876  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007a5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .progmemx.data 0000005a  00000148  00000148  000001dc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 15 .text.get_selected_product_menu 0000005c  000004c2  000004c2  00000556  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.main    0000008a  00000294  00000294  00000328  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.buttons_init 00000016  00000750  00000750  000007e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.door_init 00000016  00000766  00000766  000007fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.read_door_state 0000001a  0000071c  0000071c  000007b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.write_command_LCD 00000066  000003f8  000003f8  0000048c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.init_LCD 0000004a  00000578  00000578  0000060c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.write_data_LCD 0000006c  0000038c  0000038c  00000420  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.write_string_LCD 0000002e  00000672  00000672  00000706  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.write_string_line 00000030  00000642  00000642  000006d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.clear_display 00000014  00000792  00000792  00000826  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.uart_init 0000002a  000006cc  000006cc  00000760  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.uart_receive 0000000e  000007b8  000007b8  0000084c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.uart_send 0000000e  000007c6  000007c6  0000085a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.send_product_selection 00000026  000006f6  000006f6  0000078a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.receive_answer 00000064  0000045e  0000045e  000004f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.debounce 0000003c  00000606  00000606  0000069a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.keypad_init 0000001a  00000736  00000736  000007ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .rodata       00000010  00800200  000007f0  00000884  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 34 .text.keypad_getkey 000000f2  000001a2  000001a2  00000236  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.get_product_number 0000006e  0000031e  0000031e  000003b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.stop_alarm 00000012  000007a6  000007a6  0000083a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.init_buzzer 0000002c  000006a0  000006a0  00000734  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.sound_alarm 0000005a  0000051e  0000051e  000005b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.libgcc.div 00000044  000005c2  000005c2  00000656  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.libgcc  0000000e  000007d4  000007d4  00000868  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.__dummy_fini 00000002  000007ea  000007ea  0000087e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.__dummy_funcs_on_exit 00000002  000007ec  000007ec  00000880  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.__dummy_simulator_exit 00000002  000007ee  000007ee  00000882  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.exit    00000016  0000077c  0000077c  00000810  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text._Exit   00000004  000007e6  000007e6  0000087a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 76 00 	jmp	0xec	; 0xec <__ctors_end>
   4:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
   8:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
   c:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  10:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  14:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  18:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  1c:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  20:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  24:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  28:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  2c:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  30:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  34:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  38:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  3c:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  40:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  44:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  48:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  4c:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  50:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  54:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  58:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  5c:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  60:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  64:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  68:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  6c:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  70:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  74:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  78:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  7c:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  80:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  84:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  88:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  8c:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  90:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  94:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  98:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  9c:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  a0:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  a4:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  a8:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  ac:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  b0:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  b4:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  b8:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  bc:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  c0:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  c4:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  c8:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  cc:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  d0:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  d4:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  d8:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  dc:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  e0:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>

000000e4 <.dinit>:
  e4:	02 00       	.word	0x0002	; ????
  e6:	02 10       	cpse	r0, r2
  e8:	00 07       	cpc	r16, r16
  ea:	f0 00       	.word	0x00f0	; ????

000000ec <__ctors_end>:
  ec:	11 24       	eor	r1, r1
  ee:	1f be       	out	0x3f, r1	; 63
  f0:	cf ef       	ldi	r28, 0xFF	; 255
  f2:	d1 e2       	ldi	r29, 0x21	; 33
  f4:	de bf       	out	0x3e, r29	; 62
  f6:	cd bf       	out	0x3d, r28	; 61
  f8:	00 e0       	ldi	r16, 0x00	; 0
  fa:	0c bf       	out	0x3c, r16	; 60

000000fc <__do_copy_data>:
  fc:	e4 ee       	ldi	r30, 0xE4	; 228
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	40 e0       	ldi	r20, 0x00	; 0
 102:	19 c0       	rjmp	.+50     	; 0x136 <__do_clear_bss+0x8>
 104:	b7 91       	elpm	r27, Z+
 106:	a7 91       	elpm	r26, Z+
 108:	37 91       	elpm	r19, Z+
 10a:	27 91       	elpm	r18, Z+
 10c:	07 91       	elpm	r16, Z+
 10e:	07 fd       	sbrc	r16, 7
 110:	0e c0       	rjmp	.+28     	; 0x12e <__do_clear_bss>
 112:	97 91       	elpm	r25, Z+
 114:	87 91       	elpm	r24, Z+
 116:	ef 01       	movw	r28, r30
 118:	f9 2f       	mov	r31, r25
 11a:	e8 2f       	mov	r30, r24
 11c:	0b bf       	out	0x3b, r16	; 59
 11e:	07 90       	elpm	r0, Z+
 120:	0d 92       	st	X+, r0
 122:	a2 17       	cp	r26, r18
 124:	b3 07       	cpc	r27, r19
 126:	d9 f7       	brne	.-10     	; 0x11e <__do_copy_data+0x22>
 128:	fe 01       	movw	r30, r28
 12a:	1b be       	out	0x3b, r1	; 59
 12c:	04 c0       	rjmp	.+8      	; 0x136 <__do_clear_bss+0x8>

0000012e <__do_clear_bss>:
 12e:	1d 92       	st	X+, r1
 130:	a2 17       	cp	r26, r18
 132:	b3 07       	cpc	r27, r19
 134:	e1 f7       	brne	.-8      	; 0x12e <__do_clear_bss>
 136:	eb 3e       	cpi	r30, 0xEB	; 235
 138:	f4 07       	cpc	r31, r20
 13a:	21 f7       	brne	.-56     	; 0x104 <__do_copy_data+0x8>
 13c:	0e 94 4a 01 	call	0x294	; 0x294 <main>
 140:	0c 94 be 03 	jmp	0x77c	; 0x77c <exit>

00000144 <_exit>:
 144:	f8 94       	cli

00000146 <__stop_program>:
 146:	ff cf       	rjmp	.-2      	; 0x146 <__stop_program>

Disassembly of section .text:

000007e2 <__bad_interrupt>:
 7e2:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.get_selected_product_menu:

000004c2 <get_selected_product_menu>:
		// Add a small delay to avoid multiple detections of the same click
		//_delay_ms(5);
	}
}

void get_selected_product_menu(void){
 4c2:	cf 93       	push	r28
 4c4:	df 93       	push	r29
	// Get the pressed key
	char key;
	key = keypad_getkey();
 4c6:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <keypad_getkey>
 4ca:	c8 2f       	mov	r28, r24
	if(key!=0){
 4cc:	88 23       	and	r24, r24
 4ce:	21 f1       	breq	.+72     	; 0x518 <get_selected_product_menu+0x56>
		clear_display();
 4d0:	0e 94 c9 03 	call	0x792	; 0x792 <clear_display>
		write_string_line(1,"Selecione o Produto:");
 4d4:	4d e5       	ldi	r20, 0x5D	; 93
 4d6:	51 e0       	ldi	r21, 0x01	; 1
 4d8:	60 e0       	ldi	r22, 0x00	; 0
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	0e 94 21 03 	call	0x642	; 0x642 <write_string_line>
		write_string_line(2,"Numero: ");
 4e0:	42 e7       	ldi	r20, 0x72	; 114
 4e2:	51 e0       	ldi	r21, 0x01	; 1
 4e4:	60 e0       	ldi	r22, 0x00	; 0
 4e6:	82 e0       	ldi	r24, 0x02	; 2
 4e8:	0e 94 21 03 	call	0x642	; 0x642 <write_string_line>
		ProductNumber product = get_product_number(key);
 4ec:	8c 2f       	mov	r24, r28
 4ee:	0e 94 8f 01 	call	0x31e	; 0x31e <get_product_number>
 4f2:	d8 2f       	mov	r29, r24
 4f4:	c9 2f       	mov	r28, r25
		// Use the product number (first_key and second_key)
		send_product_selection(product);
 4f6:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <send_product_selection>
		
		write_data_LCD(product.first_key);
 4fa:	8d 2f       	mov	r24, r29
 4fc:	0e 94 c6 01 	call	0x38c	; 0x38c <write_data_LCD>
		write_data_LCD(product.second_key);
 500:	8c 2f       	mov	r24, r28
 502:	0e 94 c6 01 	call	0x38c	; 0x38c <write_data_LCD>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 506:	2f ef       	ldi	r18, 0xFF	; 255
 508:	83 ed       	ldi	r24, 0xD3	; 211
 50a:	90 e3       	ldi	r25, 0x30	; 48
 50c:	21 50       	subi	r18, 0x01	; 1
 50e:	80 40       	sbci	r24, 0x00	; 0
 510:	90 40       	sbci	r25, 0x00	; 0
 512:	e1 f7       	brne	.-8      	; 0x50c <get_selected_product_menu+0x4a>
 514:	00 c0       	rjmp	.+0      	; 0x516 <get_selected_product_menu+0x54>
 516:	00 00       	nop
		
		//write_data_LCD(key);
		//send_product_number(key);
		_delay_ms(1000);
	}
}
 518:	df 91       	pop	r29
 51a:	cf 91       	pop	r28
 51c:	08 95       	ret

Disassembly of section .text.main:

00000294 <main>:
		// Add a small delay to avoid multiple detections of the same click
		//_delay_ms(5);
	}
	if(button1r_clicked()){
		clear_display();
		write_string_line(1,"Button 1R");
 294:	cf 93       	push	r28
 296:	df 93       	push	r29
 298:	cd b7       	in	r28, 0x3d	; 61
 29a:	de b7       	in	r29, 0x3e	; 62
 29c:	69 97       	sbiw	r28, 0x19	; 25
 29e:	0f b6       	in	r0, 0x3f	; 63
 2a0:	f8 94       	cli
 2a2:	de bf       	out	0x3e, r29	; 62
 2a4:	0f be       	out	0x3f, r0	; 63
 2a6:	cd bf       	out	0x3d, r28	; 61
 2a8:	0e 94 bc 02 	call	0x578	; 0x578 <init_LCD>
 2ac:	0e 94 9b 03 	call	0x736	; 0x736 <keypad_init>
 2b0:	60 e8       	ldi	r22, 0x80	; 128
 2b2:	75 e2       	ldi	r23, 0x25	; 37
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	0e 94 66 03 	call	0x6cc	; 0x6cc <uart_init>
 2bc:	0e 94 a8 03 	call	0x750	; 0x750 <buttons_init>
 2c0:	0e 94 b3 03 	call	0x766	; 0x766 <door_init>
 2c4:	0e 94 50 03 	call	0x6a0	; 0x6a0 <init_buzzer>
 2c8:	0e 94 c9 03 	call	0x792	; 0x792 <clear_display>
 2cc:	4b e7       	ldi	r20, 0x7B	; 123
 2ce:	51 e0       	ldi	r21, 0x01	; 1
 2d0:	60 e0       	ldi	r22, 0x00	; 0
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	0e 94 21 03 	call	0x642	; 0x642 <write_string_line>
 2d8:	44 e8       	ldi	r20, 0x84	; 132
 2da:	51 e0       	ldi	r21, 0x01	; 1
 2dc:	60 e0       	ldi	r22, 0x00	; 0
 2de:	82 e0       	ldi	r24, 0x02	; 2
 2e0:	0e 94 21 03 	call	0x642	; 0x642 <write_string_line>
 2e4:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <stop_alarm>
 2e8:	06 c0       	rjmp	.+12     	; 0x2f6 <main+0x62>
 2ea:	0e 94 61 02 	call	0x4c2	; 0x4c2 <get_selected_product_menu>
 2ee:	ce 01       	movw	r24, r28
 2f0:	01 96       	adiw	r24, 0x01	; 1
 2f2:	0e 94 2f 02 	call	0x45e	; 0x45e <receive_answer>
 2f6:	0e 94 8e 03 	call	0x71c	; 0x71c <read_door_state>
 2fa:	88 23       	and	r24, r24
 2fc:	b1 f3       	breq	.-20     	; 0x2ea <main+0x56>
 2fe:	0a c0       	rjmp	.+20     	; 0x314 <main+0x80>
 300:	0e 94 8f 02 	call	0x51e	; 0x51e <sound_alarm>
 304:	0e 94 c9 03 	call	0x792	; 0x792 <clear_display>
 308:	45 e9       	ldi	r20, 0x95	; 149
 30a:	51 e0       	ldi	r21, 0x01	; 1
 30c:	60 e0       	ldi	r22, 0x00	; 0
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	0e 94 21 03 	call	0x642	; 0x642 <write_string_line>
 314:	0e 94 8e 03 	call	0x71c	; 0x71c <read_door_state>
 318:	81 11       	cpse	r24, r1
 31a:	f2 cf       	rjmp	.-28     	; 0x300 <main+0x6c>
 31c:	e3 cf       	rjmp	.-58     	; 0x2e4 <main+0x50>

Disassembly of section .text.buttons_init:

00000750 <buttons_init>:
 750:	e1 e0       	ldi	r30, 0x01	; 1
 752:	f1 e0       	ldi	r31, 0x01	; 1
 754:	80 81       	ld	r24, Z
 756:	8f 79       	andi	r24, 0x9F	; 159
 758:	80 83       	st	Z, r24
 75a:	e2 e0       	ldi	r30, 0x02	; 2
 75c:	f1 e0       	ldi	r31, 0x01	; 1
 75e:	80 81       	ld	r24, Z
 760:	8f 79       	andi	r24, 0x9F	; 159
 762:	80 83       	st	Z, r24
 764:	08 95       	ret

Disassembly of section .text.door_init:

00000766 <door_init>:
 766:	e1 e0       	ldi	r30, 0x01	; 1
 768:	f1 e0       	ldi	r31, 0x01	; 1
 76a:	80 81       	ld	r24, Z
 76c:	8f 7e       	andi	r24, 0xEF	; 239
 76e:	80 83       	st	Z, r24
 770:	e2 e0       	ldi	r30, 0x02	; 2
 772:	f1 e0       	ldi	r31, 0x01	; 1
 774:	80 81       	ld	r24, Z
 776:	8f 7e       	andi	r24, 0xEF	; 239
 778:	80 83       	st	Z, r24
 77a:	08 95       	ret

Disassembly of section .text.read_door_state:

0000071c <read_door_state>:
 71c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x7c0100>
 720:	80 71       	andi	r24, 0x10	; 16
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	95 95       	asr	r25
 726:	87 95       	ror	r24
 728:	95 95       	asr	r25
 72a:	87 95       	ror	r24
 72c:	95 95       	asr	r25
 72e:	87 95       	ror	r24
 730:	95 95       	asr	r25
 732:	87 95       	ror	r24
 734:	08 95       	ret

Disassembly of section .text.write_command_LCD:

000003f8 <write_command_LCD>:
 3f8:	95 b1       	in	r25, 0x05	; 5
 3fa:	9f 70       	andi	r25, 0x0F	; 15
 3fc:	28 2f       	mov	r18, r24
 3fe:	20 7f       	andi	r18, 0xF0	; 240
 400:	92 2b       	or	r25, r18
 402:	95 b9       	out	0x05, r25	; 5
 404:	95 b1       	in	r25, 0x05	; 5
 406:	9e 7f       	andi	r25, 0xFE	; 254
 408:	95 b9       	out	0x05, r25	; 5
 40a:	95 b1       	in	r25, 0x05	; 5
 40c:	92 60       	ori	r25, 0x02	; 2
 40e:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 410:	35 e0       	ldi	r19, 0x05	; 5
 412:	3a 95       	dec	r19
 414:	f1 f7       	brne	.-4      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 416:	00 00       	nop
 418:	95 b1       	in	r25, 0x05	; 5
 41a:	9d 7f       	andi	r25, 0xFD	; 253
 41c:	95 b9       	out	0x05, r25	; 5
 41e:	ef e1       	ldi	r30, 0x1F	; 31
 420:	f3 e0       	ldi	r31, 0x03	; 3
 422:	31 97       	sbiw	r30, 0x01	; 1
 424:	f1 f7       	brne	.-4      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 426:	00 c0       	rjmp	.+0      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 428:	00 00       	nop
 42a:	25 b1       	in	r18, 0x05	; 5
 42c:	f0 e1       	ldi	r31, 0x10	; 16
 42e:	8f 9f       	mul	r24, r31
 430:	c0 01       	movw	r24, r0
 432:	11 24       	eor	r1, r1
 434:	92 2f       	mov	r25, r18
 436:	9f 70       	andi	r25, 0x0F	; 15
 438:	89 2b       	or	r24, r25
 43a:	85 b9       	out	0x05, r24	; 5
 43c:	85 b1       	in	r24, 0x05	; 5
 43e:	82 60       	ori	r24, 0x02	; 2
 440:	85 b9       	out	0x05, r24	; 5
 442:	35 e0       	ldi	r19, 0x05	; 5
 444:	3a 95       	dec	r19
 446:	f1 f7       	brne	.-4      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 448:	00 00       	nop
 44a:	85 b1       	in	r24, 0x05	; 5
 44c:	8d 7f       	andi	r24, 0xFD	; 253
 44e:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 450:	8f e3       	ldi	r24, 0x3F	; 63
 452:	9f e1       	ldi	r25, 0x1F	; 31
 454:	01 97       	sbiw	r24, 0x01	; 1
 456:	f1 f7       	brne	.-4      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 458:	00 c0       	rjmp	.+0      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 45a:	00 00       	nop
 45c:	08 95       	ret

Disassembly of section .text.init_LCD:

00000578 <init_LCD>:
 578:	84 b1       	in	r24, 0x04	; 4
 57a:	83 6f       	ori	r24, 0xF3	; 243
 57c:	84 b9       	out	0x04, r24	; 4
 57e:	2f ef       	ldi	r18, 0xFF	; 255
 580:	80 e7       	ldi	r24, 0x70	; 112
 582:	92 e0       	ldi	r25, 0x02	; 2
 584:	21 50       	subi	r18, 0x01	; 1
 586:	80 40       	sbci	r24, 0x00	; 0
 588:	90 40       	sbci	r25, 0x00	; 0
 58a:	e1 f7       	brne	.-8      	; 0x584 <init_LCD+0xc>
 58c:	00 c0       	rjmp	.+0      	; 0x58e <init_LCD+0x16>
 58e:	00 00       	nop
 590:	83 e3       	ldi	r24, 0x33	; 51
 592:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <write_command_LCD>
 596:	82 e3       	ldi	r24, 0x32	; 50
 598:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <write_command_LCD>
 59c:	88 e2       	ldi	r24, 0x28	; 40
 59e:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <write_command_LCD>
 5a2:	8c e0       	ldi	r24, 0x0C	; 12
 5a4:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <write_command_LCD>
 5a8:	86 e0       	ldi	r24, 0x06	; 6
 5aa:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <write_command_LCD>
 5ae:	81 e0       	ldi	r24, 0x01	; 1
 5b0:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <write_command_LCD>
 5b4:	8f e3       	ldi	r24, 0x3F	; 63
 5b6:	9f e1       	ldi	r25, 0x1F	; 31
 5b8:	01 97       	sbiw	r24, 0x01	; 1
 5ba:	f1 f7       	brne	.-4      	; 0x5b8 <init_LCD+0x40>
 5bc:	00 c0       	rjmp	.+0      	; 0x5be <init_LCD+0x46>
 5be:	00 00       	nop
 5c0:	08 95       	ret

Disassembly of section .text.write_data_LCD:

0000038c <write_data_LCD>:
 38c:	95 b1       	in	r25, 0x05	; 5
 38e:	9f 70       	andi	r25, 0x0F	; 15
 390:	28 2f       	mov	r18, r24
 392:	20 7f       	andi	r18, 0xF0	; 240
 394:	92 2b       	or	r25, r18
 396:	95 b9       	out	0x05, r25	; 5
 398:	95 b1       	in	r25, 0x05	; 5
 39a:	91 60       	ori	r25, 0x01	; 1
 39c:	95 b9       	out	0x05, r25	; 5
 39e:	95 b1       	in	r25, 0x05	; 5
 3a0:	92 60       	ori	r25, 0x02	; 2
 3a2:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3a4:	35 e0       	ldi	r19, 0x05	; 5
 3a6:	3a 95       	dec	r19
 3a8:	f1 f7       	brne	.-4      	; 0x3a6 <write_data_LCD+0x1a>
 3aa:	00 00       	nop
 3ac:	95 b1       	in	r25, 0x05	; 5
 3ae:	9d 7f       	andi	r25, 0xFD	; 253
 3b0:	95 b9       	out	0x05, r25	; 5
 3b2:	ef e1       	ldi	r30, 0x1F	; 31
 3b4:	f3 e0       	ldi	r31, 0x03	; 3
 3b6:	31 97       	sbiw	r30, 0x01	; 1
 3b8:	f1 f7       	brne	.-4      	; 0x3b6 <write_data_LCD+0x2a>
 3ba:	00 c0       	rjmp	.+0      	; 0x3bc <write_data_LCD+0x30>
 3bc:	00 00       	nop
 3be:	25 b1       	in	r18, 0x05	; 5
 3c0:	f0 e1       	ldi	r31, 0x10	; 16
 3c2:	8f 9f       	mul	r24, r31
 3c4:	c0 01       	movw	r24, r0
 3c6:	11 24       	eor	r1, r1
 3c8:	92 2f       	mov	r25, r18
 3ca:	9f 70       	andi	r25, 0x0F	; 15
 3cc:	89 2b       	or	r24, r25
 3ce:	85 b9       	out	0x05, r24	; 5
 3d0:	85 b1       	in	r24, 0x05	; 5
 3d2:	81 60       	ori	r24, 0x01	; 1
 3d4:	85 b9       	out	0x05, r24	; 5
 3d6:	85 b1       	in	r24, 0x05	; 5
 3d8:	82 60       	ori	r24, 0x02	; 2
 3da:	85 b9       	out	0x05, r24	; 5
 3dc:	35 e0       	ldi	r19, 0x05	; 5
 3de:	3a 95       	dec	r19
 3e0:	f1 f7       	brne	.-4      	; 0x3de <write_data_LCD+0x52>
 3e2:	00 00       	nop
 3e4:	85 b1       	in	r24, 0x05	; 5
 3e6:	8d 7f       	andi	r24, 0xFD	; 253
 3e8:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ea:	8f e3       	ldi	r24, 0x3F	; 63
 3ec:	9f e1       	ldi	r25, 0x1F	; 31
 3ee:	01 97       	sbiw	r24, 0x01	; 1
 3f0:	f1 f7       	brne	.-4      	; 0x3ee <write_data_LCD+0x62>
 3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <write_data_LCD+0x68>
 3f4:	00 00       	nop
 3f6:	08 95       	ret

Disassembly of section .text.write_string_LCD:

00000672 <write_string_LCD>:
 672:	cf 92       	push	r12
 674:	df 92       	push	r13
 676:	ef 92       	push	r14
 678:	6b 01       	movw	r12, r22
 67a:	e8 2e       	mov	r14, r24
 67c:	07 c0       	rjmp	.+14     	; 0x68c <write_string_LCD+0x1a>
 67e:	8f ef       	ldi	r24, 0xFF	; 255
 680:	c8 1a       	sub	r12, r24
 682:	d8 0a       	sbc	r13, r24
 684:	e8 0a       	sbc	r14, r24
 686:	86 2f       	mov	r24, r22
 688:	0e 94 c6 01 	call	0x38c	; 0x38c <write_data_LCD>
 68c:	f6 01       	movw	r30, r12
 68e:	5e 2d       	mov	r21, r14
 690:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <__xload_1>
 694:	61 11       	cpse	r22, r1
 696:	f3 cf       	rjmp	.-26     	; 0x67e <write_string_LCD+0xc>
 698:	ef 90       	pop	r14
 69a:	df 90       	pop	r13
 69c:	cf 90       	pop	r12
 69e:	08 95       	ret

Disassembly of section .text.write_string_line:

00000642 <write_string_line>:
 642:	cf 92       	push	r12
 644:	df 92       	push	r13
 646:	ef 92       	push	r14
 648:	6a 01       	movw	r12, r20
 64a:	e6 2e       	mov	r14, r22
 64c:	81 30       	cpi	r24, 0x01	; 1
 64e:	21 f4       	brne	.+8      	; 0x658 <write_string_line+0x16>
 650:	80 e8       	ldi	r24, 0x80	; 128
 652:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <write_command_LCD>
 656:	05 c0       	rjmp	.+10     	; 0x662 <write_string_line+0x20>
 658:	82 30       	cpi	r24, 0x02	; 2
 65a:	19 f4       	brne	.+6      	; 0x662 <write_string_line+0x20>
 65c:	80 ec       	ldi	r24, 0xC0	; 192
 65e:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <write_command_LCD>
 662:	8e 2d       	mov	r24, r14
 664:	b6 01       	movw	r22, r12
 666:	0e 94 39 03 	call	0x672	; 0x672 <write_string_LCD>
 66a:	ef 90       	pop	r14
 66c:	df 90       	pop	r13
 66e:	cf 90       	pop	r12
 670:	08 95       	ret

Disassembly of section .text.clear_display:

00000792 <clear_display>:
 792:	81 e0       	ldi	r24, 0x01	; 1
 794:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <write_command_LCD>
 798:	8f e3       	ldi	r24, 0x3F	; 63
 79a:	9f e1       	ldi	r25, 0x1F	; 31
 79c:	01 97       	sbiw	r24, 0x01	; 1
 79e:	f1 f7       	brne	.-4      	; 0x79c <clear_display+0xa>
 7a0:	00 c0       	rjmp	.+0      	; 0x7a2 <clear_display+0x10>
 7a2:	00 00       	nop
 7a4:	08 95       	ret

Disassembly of section .text.uart_init:

000006cc <uart_init>:

void uart_send_string(const char *data) {
	while (*data) {
		uart_send(*data++);
	}
}
 6cc:	9b 01       	movw	r18, r22
 6ce:	ac 01       	movw	r20, r24
 6d0:	60 e4       	ldi	r22, 0x40	; 64
 6d2:	72 e4       	ldi	r23, 0x42	; 66
 6d4:	8f e0       	ldi	r24, 0x0F	; 15
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <__udivmodsi4>
 6dc:	21 50       	subi	r18, 0x01	; 1
 6de:	31 09       	sbc	r19, r1
 6e0:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 6e4:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 6e8:	88 e1       	ldi	r24, 0x18	; 24
 6ea:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
 6ee:	86 e0       	ldi	r24, 0x06	; 6
 6f0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
 6f4:	08 95       	ret

Disassembly of section .text.uart_receive:

000007b8 <uart_receive>:
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

unsigned char uart_receive(void) {
	// Wait for data to be received
	while (!(UCSR0A & (1 << RXC0)));
 7b8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 7bc:	88 23       	and	r24, r24
 7be:	e4 f7       	brge	.-8      	; 0x7b8 <uart_receive>
	return UDR0;
 7c0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
}
 7c4:	08 95       	ret

Disassembly of section .text.uart_send:

000007c6 <uart_send>:

void uart_send(unsigned char data) {
	// Wait for empty transmit buffer
	while (!(UCSR0A & (1 << UDRE0)));
 7c6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 7ca:	95 ff       	sbrs	r25, 5
 7cc:	fc cf       	rjmp	.-8      	; 0x7c6 <uart_send>
	// Put data into buffer, sends the data
	UDR0 = data;
 7ce:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 7d2:	08 95       	ret

Disassembly of section .text.send_product_selection:

000006f6 <send_product_selection>:
	//}
//
	//return result;
//}

void send_product_selection(ProductNumber product){
 6f6:	cf 93       	push	r28
 6f8:	df 93       	push	r29
 6fa:	d8 2f       	mov	r29, r24
 6fc:	c9 2f       	mov	r28, r25
	// Send Code
	uart_send('V');
 6fe:	86 e5       	ldi	r24, 0x56	; 86
 700:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <uart_send>
	uart_send('P');
 704:	80 e5       	ldi	r24, 0x50	; 80
 706:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <uart_send>
	// Use the product number (first_key and second_key)
	uart_send(product.first_key);
 70a:	8d 2f       	mov	r24, r29
 70c:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <uart_send>
	uart_send(product.second_key);
 710:	8c 2f       	mov	r24, r28
 712:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <uart_send>
	
}
 716:	df 91       	pop	r29
 718:	cf 91       	pop	r28
 71a:	08 95       	ret

Disassembly of section .text.receive_answer:

0000045e <receive_answer>:

void uart_send_string(const char *data) {
	while (*data) {
		uart_send(*data++);
	}
}
 45e:	ef 92       	push	r14
 460:	ff 92       	push	r15
 462:	0f 93       	push	r16
 464:	1f 93       	push	r17
 466:	cf 93       	push	r28
 468:	df 93       	push	r29
 46a:	7c 01       	movw	r14, r24
 46c:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <uart_receive>
 470:	f7 01       	movw	r30, r14
 472:	80 83       	st	Z, r24
 474:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <uart_receive>
 478:	f7 01       	movw	r30, r14
 47a:	81 83       	std	Z+1, r24	; 0x01
 47c:	90 81       	ld	r25, Z
 47e:	91 34       	cpi	r25, 0x41	; 65
 480:	c9 f4       	brne	.+50     	; 0x4b4 <receive_answer+0x56>
 482:	80 35       	cpi	r24, 0x50	; 80
 484:	b9 f4       	brne	.+46     	; 0x4b4 <receive_answer+0x56>
 486:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <uart_receive>
 48a:	f7 01       	movw	r30, r14
 48c:	82 83       	std	Z+2, r24	; 0x02
 48e:	c0 e0       	ldi	r28, 0x00	; 0
 490:	d0 e0       	ldi	r29, 0x00	; 0
 492:	0a c0       	rjmp	.+20     	; 0x4a8 <receive_answer+0x4a>
 494:	8e 01       	movw	r16, r28
 496:	0d 5f       	subi	r16, 0xFD	; 253
 498:	1f 4f       	sbci	r17, 0xFF	; 255
 49a:	0e 0d       	add	r16, r14
 49c:	1f 1d       	adc	r17, r15
 49e:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <uart_receive>
 4a2:	f8 01       	movw	r30, r16
 4a4:	80 83       	st	Z, r24
 4a6:	21 96       	adiw	r28, 0x01	; 1
 4a8:	f7 01       	movw	r30, r14
 4aa:	82 81       	ldd	r24, Z+2	; 0x02
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	c8 17       	cp	r28, r24
 4b0:	d9 07       	cpc	r29, r25
 4b2:	84 f3       	brlt	.-32     	; 0x494 <receive_answer+0x36>
 4b4:	df 91       	pop	r29
 4b6:	cf 91       	pop	r28
 4b8:	1f 91       	pop	r17
 4ba:	0f 91       	pop	r16
 4bc:	ff 90       	pop	r15
 4be:	ef 90       	pop	r14
 4c0:	08 95       	ret

Disassembly of section .text.debounce:

00000606 <debounce>:
 606:	58 2f       	mov	r21, r24
 608:	81 e0       	ldi	r24, 0x01	; 1
 60a:	40 e0       	ldi	r20, 0x00	; 0
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	16 c0       	rjmp	.+44     	; 0x63c <debounce+0x36>
 610:	ef e3       	ldi	r30, 0x3F	; 63
 612:	fc e9       	ldi	r31, 0x9C	; 156
 614:	31 97       	sbiw	r30, 0x01	; 1
 616:	f1 f7       	brne	.-4      	; 0x614 <debounce+0xe>
 618:	00 c0       	rjmp	.+0      	; 0x61a <debounce+0x14>
 61a:	00 00       	nop
 61c:	80 b1       	in	r24, 0x00	; 0
 61e:	21 e0       	ldi	r18, 0x01	; 1
 620:	30 e0       	ldi	r19, 0x00	; 0
 622:	05 2e       	mov	r0, r21
 624:	02 c0       	rjmp	.+4      	; 0x62a <debounce+0x24>
 626:	22 0f       	add	r18, r18
 628:	33 1f       	adc	r19, r19
 62a:	0a 94       	dec	r0
 62c:	e2 f7       	brpl	.-8      	; 0x626 <debounce+0x20>
 62e:	82 23       	and	r24, r18
 630:	48 13       	cpse	r20, r24
 632:	02 c0       	rjmp	.+4      	; 0x638 <debounce+0x32>
 634:	9f 5f       	subi	r25, 0xFF	; 255
 636:	01 c0       	rjmp	.+2      	; 0x63a <debounce+0x34>
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	48 2f       	mov	r20, r24
 63c:	97 30       	cpi	r25, 0x07	; 7
 63e:	40 f3       	brcs	.-48     	; 0x610 <debounce+0xa>
 640:	08 95       	ret

Disassembly of section .text.keypad_init:

00000736 <keypad_init>:
 736:	81 b1       	in	r24, 0x01	; 1
 738:	80 6f       	ori	r24, 0xF0	; 240
 73a:	81 b9       	out	0x01, r24	; 1
 73c:	82 b1       	in	r24, 0x02	; 2
 73e:	8f 70       	andi	r24, 0x0F	; 15
 740:	82 b9       	out	0x02, r24	; 2
 742:	81 b1       	in	r24, 0x01	; 1
 744:	80 7f       	andi	r24, 0xF0	; 240
 746:	81 b9       	out	0x01, r24	; 1
 748:	82 b1       	in	r24, 0x02	; 2
 74a:	8f 60       	ori	r24, 0x0F	; 15
 74c:	82 b9       	out	0x02, r24	; 2
 74e:	08 95       	ret

Disassembly of section .text.keypad_getkey:

000001a2 <keypad_getkey>:
 1a2:	6f 92       	push	r6
 1a4:	7f 92       	push	r7
 1a6:	9f 92       	push	r9
 1a8:	af 92       	push	r10
 1aa:	cf 92       	push	r12
 1ac:	df 92       	push	r13
 1ae:	ef 92       	push	r14
 1b0:	ff 92       	push	r15
 1b2:	0f 93       	push	r16
 1b4:	1f 93       	push	r17
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	cd b7       	in	r28, 0x3d	; 61
 1bc:	de b7       	in	r29, 0x3e	; 62
 1be:	60 97       	sbiw	r28, 0x10	; 16
 1c0:	0f b6       	in	r0, 0x3f	; 63
 1c2:	f8 94       	cli
 1c4:	de bf       	out	0x3e, r29	; 62
 1c6:	0f be       	out	0x3f, r0	; 63
 1c8:	cd bf       	out	0x3d, r28	; 61
 1ca:	80 e1       	ldi	r24, 0x10	; 16
 1cc:	e0 e0       	ldi	r30, 0x00	; 0
 1ce:	f2 e0       	ldi	r31, 0x02	; 2
 1d0:	de 01       	movw	r26, r28
 1d2:	11 96       	adiw	r26, 0x01	; 1
 1d4:	01 90       	ld	r0, Z+
 1d6:	0d 92       	st	X+, r0
 1d8:	8a 95       	dec	r24
 1da:	e1 f7       	brne	.-8      	; 0x1d4 <keypad_getkey+0x32>
 1dc:	a1 2c       	mov	r10, r1
 1de:	42 c0       	rjmp	.+132    	; 0x264 <keypad_getkey+0xc2>
 1e0:	82 b1       	in	r24, 0x02	; 2
 1e2:	ea 2c       	mov	r14, r10
 1e4:	f1 2c       	mov	r15, r1
 1e6:	97 01       	movw	r18, r14
 1e8:	2c 5f       	subi	r18, 0xFC	; 252
 1ea:	3f 4f       	sbci	r19, 0xFF	; 255
 1ec:	01 e0       	ldi	r16, 0x01	; 1
 1ee:	10 e0       	ldi	r17, 0x00	; 0
 1f0:	38 01       	movw	r6, r16
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <keypad_getkey+0x56>
 1f4:	66 0c       	add	r6, r6
 1f6:	77 1c       	adc	r7, r7
 1f8:	2a 95       	dec	r18
 1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <keypad_getkey+0x52>
 1fc:	96 2c       	mov	r9, r6
 1fe:	96 2d       	mov	r25, r6
 200:	90 95       	com	r25
 202:	89 23       	and	r24, r25
 204:	82 b9       	out	0x02, r24	; 2
 206:	10 e0       	ldi	r17, 0x00	; 0
 208:	26 c0       	rjmp	.+76     	; 0x256 <keypad_getkey+0xb4>
 20a:	80 b1       	in	r24, 0x00	; 0
 20c:	c1 2e       	mov	r12, r17
 20e:	d1 2c       	mov	r13, r1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	01 2e       	mov	r0, r17
 214:	02 c0       	rjmp	.+4      	; 0x21a <keypad_getkey+0x78>
 216:	95 95       	asr	r25
 218:	87 95       	ror	r24
 21a:	0a 94       	dec	r0
 21c:	e2 f7       	brpl	.-8      	; 0x216 <keypad_getkey+0x74>
 21e:	80 fd       	sbrc	r24, 0
 220:	19 c0       	rjmp	.+50     	; 0x254 <keypad_getkey+0xb2>
 222:	64 e0       	ldi	r22, 0x04	; 4
 224:	6a 0d       	add	r22, r10
 226:	81 2f       	mov	r24, r17
 228:	0e 94 03 03 	call	0x606	; 0x606 <debounce>
 22c:	88 23       	and	r24, r24
 22e:	91 f0       	breq	.+36     	; 0x254 <keypad_getkey+0xb2>
 230:	82 b1       	in	r24, 0x02	; 2
 232:	98 2a       	or	r9, r24
 234:	92 b8       	out	0x02, r9	; 2
 236:	cc 0c       	add	r12, r12
 238:	dd 1c       	adc	r13, r13
 23a:	cc 0c       	add	r12, r12
 23c:	dd 1c       	adc	r13, r13
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	8c 0f       	add	r24, r28
 244:	9d 1f       	adc	r25, r29
 246:	c8 0e       	add	r12, r24
 248:	d9 1e       	adc	r13, r25
 24a:	f6 01       	movw	r30, r12
 24c:	ee 0d       	add	r30, r14
 24e:	ff 1d       	adc	r31, r15
 250:	80 81       	ld	r24, Z
 252:	0d c0       	rjmp	.+26     	; 0x26e <keypad_getkey+0xcc>
 254:	1f 5f       	subi	r17, 0xFF	; 255
 256:	14 30       	cpi	r17, 0x04	; 4
 258:	c0 f2       	brcs	.-80     	; 0x20a <keypad_getkey+0x68>
 25a:	82 b1       	in	r24, 0x02	; 2
 25c:	08 2f       	mov	r16, r24
 25e:	06 29       	or	r16, r6
 260:	02 b9       	out	0x02, r16	; 2
 262:	a3 94       	inc	r10
 264:	93 e0       	ldi	r25, 0x03	; 3
 266:	9a 15       	cp	r25, r10
 268:	08 f0       	brcs	.+2      	; 0x26c <keypad_getkey+0xca>
 26a:	ba cf       	rjmp	.-140    	; 0x1e0 <keypad_getkey+0x3e>
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	60 96       	adiw	r28, 0x10	; 16
 270:	0f b6       	in	r0, 0x3f	; 63
 272:	f8 94       	cli
 274:	de bf       	out	0x3e, r29	; 62
 276:	0f be       	out	0x3f, r0	; 63
 278:	cd bf       	out	0x3d, r28	; 61
 27a:	df 91       	pop	r29
 27c:	cf 91       	pop	r28
 27e:	1f 91       	pop	r17
 280:	0f 91       	pop	r16
 282:	ff 90       	pop	r15
 284:	ef 90       	pop	r14
 286:	df 90       	pop	r13
 288:	cf 90       	pop	r12
 28a:	af 90       	pop	r10
 28c:	9f 90       	pop	r9
 28e:	7f 90       	pop	r7
 290:	6f 90       	pop	r6
 292:	08 95       	ret

Disassembly of section .text.get_product_number:

0000031e <get_product_number>:
 31e:	0f 93       	push	r16
 320:	1f 93       	push	r17
 322:	cf 93       	push	r28
 324:	df 93       	push	r29
 326:	20 ed       	ldi	r18, 0xD0	; 208
 328:	28 0f       	add	r18, r24
 32a:	22 30       	cpi	r18, 0x02	; 2
 32c:	88 f0       	brcs	.+34     	; 0x350 <get_product_number+0x32>
 32e:	00 e3       	ldi	r16, 0x30	; 48
 330:	98 2f       	mov	r25, r24
 332:	26 c0       	rjmp	.+76     	; 0x380 <get_product_number+0x62>
 334:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <keypad_getkey>
 338:	98 2f       	mov	r25, r24
 33a:	2f ef       	ldi	r18, 0xFF	; 255
 33c:	30 e7       	ldi	r19, 0x70	; 112
 33e:	82 e0       	ldi	r24, 0x02	; 2
 340:	21 50       	subi	r18, 0x01	; 1
 342:	30 40       	sbci	r19, 0x00	; 0
 344:	80 40       	sbci	r24, 0x00	; 0
 346:	e1 f7       	brne	.-8      	; 0x340 <get_product_number+0x22>
 348:	00 c0       	rjmp	.+0      	; 0x34a <get_product_number+0x2c>
 34a:	00 00       	nop
 34c:	e2 96       	adiw	r28, 0x32	; 50
 34e:	03 c0       	rjmp	.+6      	; 0x356 <get_product_number+0x38>
 350:	18 2f       	mov	r17, r24
 352:	c0 e0       	ldi	r28, 0x00	; 0
 354:	d0 e0       	ldi	r29, 0x00	; 0
 356:	29 2f       	mov	r18, r25
 358:	91 11       	cpse	r25, r1
 35a:	04 c0       	rjmp	.+8      	; 0x364 <get_product_number+0x46>
 35c:	c4 3c       	cpi	r28, 0xC4	; 196
 35e:	39 e0       	ldi	r19, 0x09	; 9
 360:	d3 07       	cpc	r29, r19
 362:	40 f3       	brcs	.-48     	; 0x334 <get_product_number+0x16>
 364:	c4 3c       	cpi	r28, 0xC4	; 196
 366:	89 e0       	ldi	r24, 0x09	; 9
 368:	d8 07       	cpc	r29, r24
 36a:	28 f0       	brcs	.+10     	; 0x376 <get_product_number+0x58>
 36c:	21 11       	cpse	r18, r1
 36e:	03 c0       	rjmp	.+6      	; 0x376 <get_product_number+0x58>
 370:	91 2f       	mov	r25, r17
 372:	00 e3       	ldi	r16, 0x30	; 48
 374:	05 c0       	rjmp	.+10     	; 0x380 <get_product_number+0x62>
 376:	c5 3c       	cpi	r28, 0xC5	; 197
 378:	d9 40       	sbci	r29, 0x09	; 9
 37a:	10 f4       	brcc	.+4      	; 0x380 <get_product_number+0x62>
 37c:	21 11       	cpse	r18, r1
 37e:	01 2f       	mov	r16, r17
 380:	80 2f       	mov	r24, r16
 382:	df 91       	pop	r29
 384:	cf 91       	pop	r28
 386:	1f 91       	pop	r17
 388:	0f 91       	pop	r16
 38a:	08 95       	ret

Disassembly of section .text.stop_alarm:

000007a6 <stop_alarm>:
 7a6:	e0 e9       	ldi	r30, 0x90	; 144
 7a8:	f0 e0       	ldi	r31, 0x00	; 0
 7aa:	80 81       	ld	r24, Z
 7ac:	8f 7d       	andi	r24, 0xDF	; 223
 7ae:	80 83       	st	Z, r24
 7b0:	8e b1       	in	r24, 0x0e	; 14
 7b2:	8f 7e       	andi	r24, 0xEF	; 239
 7b4:	8e b9       	out	0x0e, r24	; 14
 7b6:	08 95       	ret

Disassembly of section .text.init_buzzer:

000006a0 <init_buzzer>:
 6a0:	8d b1       	in	r24, 0x0d	; 13
 6a2:	80 61       	ori	r24, 0x10	; 16
 6a4:	8d b9       	out	0x0d, r24	; 13
 6a6:	e0 e9       	ldi	r30, 0x90	; 144
 6a8:	f0 e0       	ldi	r31, 0x00	; 0
 6aa:	80 81       	ld	r24, Z
 6ac:	81 62       	ori	r24, 0x21	; 33
 6ae:	80 83       	st	Z, r24
 6b0:	e1 e9       	ldi	r30, 0x91	; 145
 6b2:	f0 e0       	ldi	r31, 0x00	; 0
 6b4:	80 81       	ld	r24, Z
 6b6:	8a 60       	ori	r24, 0x0A	; 10
 6b8:	80 83       	st	Z, r24
 6ba:	80 e8       	ldi	r24, 0x80	; 128
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7c009b>
 6c2:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7c009a>
 6c6:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <stop_alarm>
 6ca:	08 95       	ret

Disassembly of section .text.sound_alarm:

0000051e <sound_alarm>:
 51e:	e0 e9       	ldi	r30, 0x90	; 144
 520:	f0 e0       	ldi	r31, 0x00	; 0
 522:	80 81       	ld	r24, Z
 524:	80 62       	ori	r24, 0x20	; 32
 526:	80 83       	st	Z, r24
 528:	20 e0       	ldi	r18, 0x00	; 0
 52a:	30 e0       	ldi	r19, 0x00	; 0
 52c:	1f c0       	rjmp	.+62     	; 0x56c <sound_alarm+0x4e>
 52e:	4f ef       	ldi	r20, 0xFF	; 255
 530:	84 e3       	ldi	r24, 0x34	; 52
 532:	9c e0       	ldi	r25, 0x0C	; 12
 534:	41 50       	subi	r20, 0x01	; 1
 536:	80 40       	sbci	r24, 0x00	; 0
 538:	90 40       	sbci	r25, 0x00	; 0
 53a:	e1 f7       	brne	.-8      	; 0x534 <sound_alarm+0x16>
 53c:	00 c0       	rjmp	.+0      	; 0x53e <sound_alarm+0x20>
 53e:	00 00       	nop
 540:	e0 e9       	ldi	r30, 0x90	; 144
 542:	f0 e0       	ldi	r31, 0x00	; 0
 544:	80 81       	ld	r24, Z
 546:	8f 7d       	andi	r24, 0xDF	; 223
 548:	80 83       	st	Z, r24
 54a:	8e b1       	in	r24, 0x0e	; 14
 54c:	8f 7e       	andi	r24, 0xEF	; 239
 54e:	8e b9       	out	0x0e, r24	; 14
 550:	4f ef       	ldi	r20, 0xFF	; 255
 552:	84 e3       	ldi	r24, 0x34	; 52
 554:	9c e0       	ldi	r25, 0x0C	; 12
 556:	41 50       	subi	r20, 0x01	; 1
 558:	80 40       	sbci	r24, 0x00	; 0
 55a:	90 40       	sbci	r25, 0x00	; 0
 55c:	e1 f7       	brne	.-8      	; 0x556 <sound_alarm+0x38>
 55e:	00 c0       	rjmp	.+0      	; 0x560 <sound_alarm+0x42>
 560:	00 00       	nop
 562:	80 81       	ld	r24, Z
 564:	80 62       	ori	r24, 0x20	; 32
 566:	80 83       	st	Z, r24
 568:	2f 5f       	subi	r18, 0xFF	; 255
 56a:	3f 4f       	sbci	r19, 0xFF	; 255
 56c:	2a 30       	cpi	r18, 0x0A	; 10
 56e:	31 05       	cpc	r19, r1
 570:	f4 f2       	brlt	.-68     	; 0x52e <sound_alarm+0x10>
 572:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <stop_alarm>
 576:	08 95       	ret

Disassembly of section .text.libgcc.div:

000005c2 <__udivmodsi4>:
 5c2:	a1 e2       	ldi	r26, 0x21	; 33
 5c4:	1a 2e       	mov	r1, r26
 5c6:	aa 1b       	sub	r26, r26
 5c8:	bb 1b       	sub	r27, r27
 5ca:	fd 01       	movw	r30, r26
 5cc:	0d c0       	rjmp	.+26     	; 0x5e8 <__udivmodsi4_ep>

000005ce <__udivmodsi4_loop>:
 5ce:	aa 1f       	adc	r26, r26
 5d0:	bb 1f       	adc	r27, r27
 5d2:	ee 1f       	adc	r30, r30
 5d4:	ff 1f       	adc	r31, r31
 5d6:	a2 17       	cp	r26, r18
 5d8:	b3 07       	cpc	r27, r19
 5da:	e4 07       	cpc	r30, r20
 5dc:	f5 07       	cpc	r31, r21
 5de:	20 f0       	brcs	.+8      	; 0x5e8 <__udivmodsi4_ep>
 5e0:	a2 1b       	sub	r26, r18
 5e2:	b3 0b       	sbc	r27, r19
 5e4:	e4 0b       	sbc	r30, r20
 5e6:	f5 0b       	sbc	r31, r21

000005e8 <__udivmodsi4_ep>:
 5e8:	66 1f       	adc	r22, r22
 5ea:	77 1f       	adc	r23, r23
 5ec:	88 1f       	adc	r24, r24
 5ee:	99 1f       	adc	r25, r25
 5f0:	1a 94       	dec	r1
 5f2:	69 f7       	brne	.-38     	; 0x5ce <__udivmodsi4_loop>
 5f4:	60 95       	com	r22
 5f6:	70 95       	com	r23
 5f8:	80 95       	com	r24
 5fa:	90 95       	com	r25
 5fc:	9b 01       	movw	r18, r22
 5fe:	ac 01       	movw	r20, r24
 600:	bd 01       	movw	r22, r26
 602:	cf 01       	movw	r24, r30
 604:	08 95       	ret

Disassembly of section .text.libgcc:

000007d4 <__xload_1>:
 7d4:	57 fd       	sbrc	r21, 7
 7d6:	03 c0       	rjmp	.+6      	; 0x7de <__xload_1+0xa>
 7d8:	5b bf       	out	0x3b, r21	; 59
 7da:	67 91       	elpm	r22, Z+
 7dc:	08 95       	ret
 7de:	60 81       	ld	r22, Z
 7e0:	08 95       	ret

Disassembly of section .text.__dummy_fini:

000007ea <_fini>:
 7ea:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000007ec <__funcs_on_exit>:
 7ec:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000007ee <__simulator_exit>:
 7ee:	08 95       	ret

Disassembly of section .text.exit:

0000077c <exit>:
 77c:	ec 01       	movw	r28, r24
 77e:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__funcs_on_exit>
 782:	0e 94 f5 03 	call	0x7ea	; 0x7ea <_fini>
 786:	ce 01       	movw	r24, r28
 788:	0e 94 f7 03 	call	0x7ee	; 0x7ee <__simulator_exit>
 78c:	ce 01       	movw	r24, r28
 78e:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <_Exit>

Disassembly of section .text._Exit:

000007e6 <_Exit>:
 7e6:	0e 94 a2 00 	call	0x144	; 0x144 <_exit>
